<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="800" showStatusBar="false"
		  creationComplete="init()" xmlns:uicontrol="uicontrol.*" skinClass="skins.WindowChannelSkin">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
		import control.CBorderContainer;
		import control.window.GroupMemberPanel;
		import control.window.GroupPanel;
		import control.window.PersonPanel;

		import events.ChangeUserEvent;
		import events.ChatTimelineEvent;
		import events.ListClickEvent;

		import httpcontrol.HttpServiceUtil;

		import json.JParser;

		import model.ChatChannel;
		import model.Schedule;

		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.Menu;
		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.events.MenuEvent;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;

		import org.idream.pomelo.Pomelo;
		import org.idream.pomelo.PomeloEvent;

		import spark.components.VScrollBar;

		import util.ChatManager;
		import util.DateUtil;
		import util.RightClickManager;
		import util.ScheduleUtil;
		import util.ToolUtil;
		import util.UUIDUtil;

		[Bindable]
		public var bigPanel:Boolean = true;
		[Bindable]
		private var chatsArr:ArrayCollection = new ArrayCollection();

		[Bindable]
		public var chatUser:ChatChannel;

		private var _flag:String;


		//        [Bindable]
		//        public var type:String = "d";//部门 为“d” 任务为 “t” 讨论组为：“g”

		public function get flag():String {
			return _flag;
		}

		public function set flag(value:String):void {
			_flag = value;
		}

		public function releaseListener():void {

		}


		private function flagTimeline():void {
			if (this.visible) {
				var event:ChatTimelineEvent = new ChatTimelineEvent(ChatTimelineEvent.Channel, true);
				event.channel = chatUser.channel;
				event.flag = this.flag;
				dispatchEvent(event);
			}
		}


		public function init():void {
			if (chatUser == null) {
				return;
			}

			if (chatUser.members == null) {
				horGroup.validateNow();
				addressList.visible = false;
				horGroup.removeElement(addressList);
			} else {
				addressList.visible = true;
			}
			if (chatUser) {
				head.source = chatUser.icon;
				nameLabel.text = chatUser.name;
			}
			var pids:Array = chatUser.getPids();
			if (chatUser.type == "p") {
				head.isPerson = true;
				if (pids[0] == pids[1]) {
					closeContainer();
					return;
				}

				Pomelo.getIns().request("connector.entryHandler.createChannel", {
					channel: chatUser.channel,
					users: pids
				}, function (data:Object):void {
					if (data.code == 500) {
						Alert.show("即时通信服务器异常，请稍后再试。");
					}
				});
			}
			if (chatUser.type != 'g') {
				quiteButton.visible = false;

			}
			if (chatUser.type == 't') {
				scheduleButton.visible = true;

			} else {
				scheduleButton.visible = false;
			}
			memberButton.visible = false;
			if (chatUser.type == 'g' && chatUser.author == ToolUtil.sessionUser.pid) {
				memberButton.visible = true;
			}

			Pomelo.getIns().addEventListener('onChat', chatHandler);
			getHistoryChat();
			flagTimeline();
			Pomelo.getIns().addEventListener('quiteChannel', quiteChannelHandler);
			Pomelo.getIns().addEventListener('joinChannel', joinChannelHandler);

			this.addEventListener(FocusEvent.FOCUS_IN, function (e:FocusEvent):void {
				flagCurrentChannel();
			});
			flagCurrentChannel();

			//            chatList.addEventListener(Flex)
			chatList.scroller.verticalScrollBar.addEventListener(Event.CHANGE, list_verticalScrollBar_change);

			chatTitleContainer.addEventListener(MouseEvent.MOUSE_DOWN, pushApp);

			this.title = chatUser.name;
		}

		public function pushApp(e:MouseEvent):void {
			if (this.nativeWindow.displayState == NativeWindowDisplayState.NORMAL) {
				this.nativeWindow.startMove();
			}
		}


		private var hashistory:Boolean = true;
		private var isloading:Boolean = false;

		private function list_verticalScrollBar_change(evt:Event):void {
			if (!hashistory || isloading) {
				return;
			}
			//            var vsb:VScrollBar = evt.currentTarget as VScrollBar;
			//            var obj:Object = {};
			//            obj.type = evt.type;
			//            obj.val = vsb.value;
			//            obj.max = vsb.maximum;
			if (evt.currentTarget is VScrollBar && evt.currentTarget.value == 0) {
				isloading = true;
				callLater(getHistoryChat);
			}
			//            callLater(dgScroll);
		}

		private function flagCurrentChannel():void {
			ToolUtil.currentChannel = chatUser.channel;
		}

		//        private var chatindex:int= -1;
		public function getHistoryChat():void {
			var timeline:String;
			if (chatsArr.length > 0) {
				timeline = chatsArr.getItemAt(0)._id;
			}
			Pomelo.getIns().request("connector.entryHandler.history", {
				channel: chatUser.channel,
				id: timeline
			}, function (data:Object):void {
				if (data.code == 200) {
					var chats:ArrayCollection = new ArrayCollection(data.chats as Array);
					if (chats.length == 0) {
						hashistory = false;
						return;
					}

					if (chatsArr.length == 0) {
						chatsArr.addAll(chats);
					} else {
						chatsArr.addAllAt(chats, 0);
					}
					setPreDate(chatsArr);
					//                    chatindex = chats.length-1;
					//                    showLastMsg();
					callLater(showLastMsg, [chats.length - 1]);
				}
			})
		}


		private function setPreDate(list:ArrayCollection):void {
			var pre:Object;
			for each(var item:Object in list) {
				if (pre != null) {
					item.predate = pre.d;
				}
				pre = item;
			}
		}

		public function showLastMsg(index:Number = -1):void {
			if (index < 0) {
				if (chatsArr.length > 0) {
					chatList.validateNow();
					chatList.ensureIndexIsVisible(chatsArr.length - 1);
					chatList.validateNow();
					chatList.ensureIndexIsVisible(chatsArr.length - 1);

				}
			} else {
				chatList.validateNow();
				chatList.ensureIndexIsVisible(index);
				chatList.validateNow();
				chatList.ensureIndexIsVisible(index);
			}
			isloading = false;
		}

		public function changeCurrentUser(e:ChangeUserEvent):void {
			Pomelo.getIns().addEventListener('onChat', chatHandler);
		}

		public function closeContainer():void {
			Pomelo.getIns().removeEventListener('onChat', chatHandler);
			Pomelo.getIns().removeEventListener('quiteChannel', quiteChannelHandler);
			Pomelo.getIns().removeEventListener('joinChannel', joinChannelHandler);
			var e:CloseEvent = new CloseEvent(CloseEvent.CLOSE);
			dispatchEvent(e);
			PopUpManager.removePopUp(this);
		}

		public function quiteChannelHandler(event:PomeloEvent):void {
			if (chatUser.channel != event.message.channel) {
				return;
			}
			chatUser.members.refresh();
			for each(var person:Object in chatUser.members) {
				if (person.id == event.message.pid) {
					var i:int = chatUser.members.getItemIndex(person);
					if (i > -1) {
						chatUser.members.removeItemAt(i);
					}
					return;
				}
			}

		}

		public function joinChannelHandler(event:PomeloEvent):void {
			if (chatUser.channel != event.message.channel) {
				return;
			}
			chatUser.members.refresh();
			for each(var p:Object in chatUser.members) {
				if (p.id == event.message.pid) {
					return;
				}
			}
			for each(var person:Object in ToolUtil.memberList) {
				if (person.id == event.message.pid) {
					chatUser.members.addItem(person);
					return;
				}
			}
		}

		private function chatHandler(event:PomeloEvent):void {
			if (event.message.msg.channel != chatUser.channel) {
				return;
			}
			chatsArr.addItem(event.message.msg);
			setPreDate(chatsArr);
			showLastMsg();
			if (event.message.msg.channel == ToolUtil.currentChannel && event.message.msg.hasOwnProperty('f') && event.message.msg.f != ToolUtil.sessionUser.pid) {
				flagTimeline();
			}

		}

		private var contextMenuItems:ArrayCollection;

		private function listItemClick_handler(e:ListClickEvent):void {
			contextMenuItems = new ArrayCollection([
				{"icon": CBorderContainer.wximg, "text": "发送消息", "mode": "chat", "selectedUser": e.data},
				{
					"icon": CBorderContainer.wximg,
					"text": "把'" + e.data.name + "'加入常用联系人",
					"mode": "addcontact",
					"selectedUser": e.data
				},
				{
					"icon": CBorderContainer.saveimg,
					"text": "查看'" + e.data.name + "'的信息",
					"mode": "show",
					"selectedUser": e.data
				}
			]);
			for each(var contact:Object in ToolUtil.contactsList) {
				if (e.data.id == contact.id) {
					contextMenuItems = new ArrayCollection([
						{"icon": CBorderContainer.wximg, "text": "发送消息", "mode": "chat", "selectedUser": e.data},
						{
							"icon": CBorderContainer.saveimg,
							"text": "查看'" + e.data.name + "'信息",
							"mode": "show",
							"selectedUser": e.data
						}
					]);
				}
			}
			if (e.data.id == ToolUtil.sessionUser.pid) {
				contextMenuItems = new ArrayCollection([
					{
						"icon": CBorderContainer.saveimg,
						"text": "查看'" + e.data.name + "'信息",
						"mode": "show",
						"selectedUser": e.data
					}
				]);
			}


			var menu:Menu = RightClickManager.getMenu(this, contextMenuItems, false);

			menu.labelField = "text";
			menu.iconField = "icon";
			menu.variableRowHeight = true;
			menu.rowHeight = 35;
			menu.addEventListener(MenuEvent.ITEM_CLICK, menuItemClickHandler);

			//              var point:Point = new Point(mouseX,mouseY);
			//              point = localToGlobal(point);
			menu.show(stage.mouseX - 120, stage.mouseY);
		}

		private function menuItemClickHandler(e:MenuEvent):void {
			var item:Object = e.item;
			var mod:String = item.mode;
			switch (mod) {
				case 'chat':
					var chatevent:ListClickEvent = new ListClickEvent("ChatUser",  new ChatChannel(e.item.selectedUser));
					dispatchEvent(chatevent);
					break;
				case 'addcontact':
					var param:Object = new Object();
					param["pid"] = e.item.selectedUser.id;
					HttpServiceUtil.getCHTTPServiceAndResult("/riliusers/addPersonContact", function (result:Object, event:ResultEvent):void {
						ToolUtil.contactsRefresh();
					}, "POST").send(param);
					break;
				case 'show':
					var p:PersonPanel = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, PersonPanel, true) as PersonPanel;
					p.personData = e.item.selectedUser;
					break;

			}

		}

		private function chatUserPanel():void {
			if (addressList.selectedItem == null) {
				return;
			}
			if (addressList.selectedItem.id == ToolUtil.sessionUser.pid) {
				Alert.show("不可以和自己聊天", "提示", 4, this);
				return;
			}
			var chat:ChatChannel = new ChatChannel(addressList.selectedItem);
			var chatevent:ListClickEvent = new ListClickEvent("ChatUser", chat);
			dispatchEvent(chatevent);
		}

		private function chatItemClick_handler(e:ListClickEvent):void {

		}

		private function createGroup():void {
			var gp:GroupPanel = PopUpManager.createPopUp(this, GroupPanel, true) as GroupPanel;
			gp.isEffect = false;
			if (chatUser.members == null) {
				var m:ArrayCollection = new ArrayCollection();
				for each(var p:Object in ToolUtil.memberList) {
					if (ToolUtil.sessionUser.pid == p.id || chatUser.id == p.id) {
						m.addItem(p);
					}
				}
				gp.chatmember = m;
			} else {
				gp.chatmember = chatUser.members;
			}
			gp.addEventListener("ChatUser", function (e:ListClickEvent):void {
				dispatchEvent(e);
			});

		}

		protected function sendBTN_clickHandler(event:MouseEvent = null):void {
			trace("//****TextInputer.sendBTN_clickHandler 执行****//");
			var _re:RegExp = /^\s*$/;
			var __msg:String = ti.text;
			if (_re.test(__msg))
			//如果输入的字符串仅包含空格、回车或者空，就不能发送信息
			{
				ti.setFocus();
				return;
			}
			var chat:Object = new Object();

			chat['id'] = UUIDUtil.create();
			chat['te'] = __msg;
			chat['co'] = cp.selectedColor;
			//            chat['we'] = bBTN.selected?'bold':'normal';
			//            chat['st'] = iBTN.selected?'italic':'normal';
			//            chat['de'] = uBTN.selected?'underline':'none';
			//            chat['si'] =ns.value ;
			chat['d'] = DateUtil.dateLblChat(new Date());

			if (chatUser.members == null) {
				ChatManager.sendMessageToPerson(Number(chatUser.id), chat, function (data:Object):void {
					al(data, chat);
				});
			} else {
				if (chatUser.channel) {
					ChatManager.sendMessageToChannel(chatUser.channel, chat, function (data:Object):void {
						al(data, chat);
					});
				} else {
					ChatManager.sendMessageToDeparment(Number(chatUser.id), chatUser.type, chat, function (data:Object):void {
						al(data, chat);
					});
				}

			}


			ti.text = '';
			ti.setFocus();
		}

		private function al(data:Object, chat:Object):void {
			trace("chat:" + JParser.encode(data));
		}

		private function pressEnter(event:FlexEvent):void {
			sendBTN_clickHandler();
		}


		private function quiteGroup():void {
			Pomelo.getIns().notify("connector.entryHandler.quiteChannel", {
				pid: ToolUtil.sessionUser.pid,
				channel: chatUser.channel
			});
		}


		private function memberGroup():void {
			var gp:GroupMemberPanel = PopUpManager.createPopUp(this, GroupMemberPanel, true) as GroupMemberPanel;
			gp.isEffect = false;
			gp.chatmember = chatUser.members;
			gp.channel = chatUser.channel;
		}

		private function showSchedule():void {
			var obj:Object = new Object();
			obj['id'] = chatUser.channel.substr(1);
			HttpServiceUtil.getCHTTPServiceAndResult("/ca/getScheduleById", function (result:Object, e:ResultEvent):void {
				if (result.success) {
					var schedulData:Schedule = new Schedule(result.result);
					ToolUtil.updateSchedul(schedulData.id, schedulData);
					ScheduleUtil.showSchedulePanel(schedulData.id);
					closeContainer();
				}
			}, "POST").send(obj);
		}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout gap="2" paddingBottom="10" paddingRight="10" paddingLeft="10" paddingTop="0" />
	</s:layout>
	<s:HGroup id="chatTitleContainer" width="100%" height="41" verticalAlign="middle"  >

		<uicontrol:HeadImage id="head" width="35" height="35"/>
		<s:Label id="nameLabel" textDecoration="underline"  ></s:Label>
		
		<mx:Spacer width="100%" height="10"/>
		<s:HGroup verticalAlign="top" height="100%">
			<s:Button skinClass="skins.MinBtnSkin" width="28.5" height="28.5" buttonMode="true" />
			<s:Button skinClass="skins.MaxBtnSkin" width="28.5" height="28.5" buttonMode="true" />
			<s:Button skinClass="skins.CloseBtnSkin" width="28.5" height="28.5" buttonMode="true" />
		</s:HGroup>
		
	</s:HGroup>
	<s:HGroup id="horGroup" width="100%" height="100%" gap="8">
		<s:VGroup   width="100%" height="100%" >
			
			<uicontrol:AddressList id="chatList" borderColor="#d6d6d6"  dataProvider="{chatsArr}" chatChannel="{chatUser}"
								   listItemClick="chatItemClick_handler(event)"
								   itemRenderer="uicontrol.renderer.ChatItemRenderer" width="100%" height="100%">
			</uicontrol:AddressList>
			
			<!--<s:TextArea id="ti" width="100%" height="50"-->
			<!--paddingTop="10" paddingBottom="5" paddingLeft="5" paddingRight="5"-->
			<!--focusEnabled="true" fontLookup="device"-->
			<!--fontFamily="simsun,MINGLIU"-->
			<!--alignmentBaseline="ideographicCenter"-->
			<!--color="{cp.selectedColor}"-->
			<!--fontWeight="{bBTN.selected?'bold':'normal'}"-->
			<!--fontStyle="{iBTN.selected?'italic':'normal'}"-->
			<!--textDecoration="{uBTN.selected?'underline':'none'}"-->
			<!--fontSize="{ns.value}"-->
			<!--editable="true"-->
			<!--keyUp="pressEnter(event)"-->
			<!--/>-->
			<s:HGroup width="100%" height="41" horizontalAlign="left" verticalAlign="middle">
				<mx:ColorPicker id="cp"/>
				<s:Button skinClass="skins.BtnJiePingSkin" buttonMode="true" />
				<s:Button skinClass="skins.BtnTuPianSkin" buttonMode="true" />
				<s:Button skinClass="skins.BtnWenJianSkin" buttonMode="true" />
				<s:Button skinClass="skins.BtnShangChuanSkin" buttonMode="true" />
				<s:Spacer width="100%">
					
				</s:Spacer>
				<s:Button id="scheduleButton" label="显示任务" width="100" buttonMode="true" skinClass="skins.Chat2BtnSkin" click="showSchedule()" includeInLayout="{scheduleButton.visible}"  />
				<s:Button id="quiteButton" label="退出讨论组" width="100" buttonMode="true" skinClass="skins.Chat2BtnSkin" click="quiteGroup()" includeInLayout="{quiteButton.visible}"  />
				<s:Button id="memberButton" label="成员管理" width="100" buttonMode="true" skinClass="skins.Chat2BtnSkin" click="memberGroup()" includeInLayout="{memberButton.visible}"  />
				<s:Button id="usersButton" label="创建讨论组" width="100" buttonMode="true" skinClass="skins.Chat2BtnSkin" click="createGroup()" includeInLayout="{usersButton.visible}"  />
			</s:HGroup>
			<s:TextArea  id="ti" height="94" borderColor="#d6d6d6" prompt="{ChatManager.pomelo_online?'回车(Enter)发送':'即时通信服务正在维护中，目前不可用。'}" width="100%"  color="{cp.selectedColor}" enabled="{ChatManager.pomelo_online}" />
			
			<s:HGroup width="100%" height="44" horizontalAlign="right" verticalAlign="middle">
				<s:Button  label="关闭" color="#ffffff" width="60" skinClass="skins.ChatBtnSkin" buttonMode="true"  height="28" click="{ti.text='';}"  />
				<s:Button  label="发送" color="#ffffff" width="60" skinClass="skins.ChatBtnSkin" buttonMode="true" height="28" click="{ti.text='';}"  />
			</s:HGroup>
			
		</s:VGroup>
		
		<uicontrol:AddressList  id="addressList" borderColor="#d6d6d6"  dataProvider="{chatUser.members}"  visible="{bigPanel}" includeInLayout="{bigPanel}"
								doubleClickEnabled="true" doubleClick="chatUserPanel()" toolTip="双击发送信息" listItemClick="listItemClick_handler(event)"
								itemRenderer="uicontrol.renderer.AddressItemRenderer" width="150" height="100%">
		</uicontrol:AddressList>
		
		
	</s:HGroup>

</s:Window>
