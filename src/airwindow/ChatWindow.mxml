<?xml version="1.0" encoding="utf-8"?>
<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  creationComplete="init()" width="275" height="700" xmlns:uicontrol="uicontrol.*" showStatusBar="false" skinClass="skins.WindowChannelSkin">

	<fx:Script>
		<![CDATA[
		import events.ChangeUserEvent;
		import events.ChatTimelineEvent;
		import events.ListClickEvent;
		import events.PaoPaoEvent;
		
		import model.ChatChannel;
		
		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;
		
		import org.idream.pomelo.Pomelo;
		import org.idream.pomelo.PomeloEvent;
		
		import util.ChatManager;
		import util.ToolUtil;

		public var chat_map:Object = new Object();

		public var unread_messagelist:Object = new Object();

		public function closeWindow(e:Event):void {
			Pomelo.getIns().removeEventListener('removeChannel', removeChannelHandler);
			Pomelo.getIns().removeEventListener('onChat', chatHandler);
			this.removeEventListener(ListClickEvent.CHATUSER, listItemClick_handler);
			this.removeEventListener(ListClickEvent.UNSUBSCRIBE, unsubscribe_handler);
//			this.removeEventListener(ChatTimelineEvent.Channel, flagTimeline);
			changeCurrentUser(null);
			Pomelo.getIns().disconnect();

		}

		public function init():void {
			myhead.source = ToolUtil.getAnyPersonById(ToolUtil.sessionUser.pid).icon;
			ChatManager.loginChat();
			this.addEventListener(ListClickEvent.CHATUSER, listItemClick_handler);
			this.addEventListener(ListClickEvent.UNSUBSCRIBE, unsubscribe_handler);
//			this.addEventListener(ChatTimelineEvent.Channel, flagTimeline);
			Pomelo.getIns().addEventListener('removeChannel', removeChannelHandler);
			Pomelo.getIns().addEventListener('onChat', chatHandler);

			addEventListener(CloseEvent.CLOSE, closeWindow);
			FlexGlobals.topLevelApplication.addEventListener(ChangeUserEvent.ChangeUser_EventStr, changeCurrentUser);

			addEventListener(MouseEvent.MOUSE_DOWN, pushApp);
			addressList.addEventListener(MouseEvent.MOUSE_DOWN, pushApp);

		}

		public function noticeWindow(msg:Object):void {
			var cp:ChatPannel = chat_map[msg.channel];

			if (msg.channel != ToolUtil.currentChannel) {
				unread_messagelist[msg.channel].unread += 1;
				ToolUtil.groupList.refresh();
				if (cp == null) {
					var notice:NoticeWindow = new NoticeWindow();
					notice.transparent = true;
					notice.type = NativeWindowType.UTILITY;
					notice.systemChrome = NativeWindowSystemChrome.NONE;
					notice.message = msg;
					notice.open();
					notice.addEventListener(PaoPaoEvent.CHAT, openChatByChannel);


				} else {
					cp.nativeWindow.notifyUser(NotificationType.CRITICAL);
					cp.nativeWindow.orderToFront();
				}
				msg.unread = true;


			} else {

				if (cp != null) {
					cp.nativeWindow.notifyUser(NotificationType.CRITICAL);
				}
			}
			dispatchEvent(new PaoPaoEvent(PaoPaoEvent.CHAT));

		}

		public function chatHandler(event:PomeloEvent):void {

			if (!unread_messagelist.hasOwnProperty(event.message.msg.channel)) {
				// 放入 chatchannel 对象。和 ToolUtil.grouplist 等公用。未读信息才会共用。
				var chatChannel:ChatChannel = getChatByChannel(event.message.msg.channel);
				if (chatChannel == null) {
					Pomelo.getIns().request("connector.entryHandler.queryChannelInfo", {channel: event.message.msg.channel}, function (data:Object):void {
						if (data.code == 200 && data.channel != null) {
							chatChannel = new ChatChannel(data.channel);
							ToolUtil.groupList.addItem(chatChannel);
							unread_messagelist[event.message.msg.channel] = chatChannel;
							noticeWindow(event.message.msg);
						}
					});
				} else {
					if (event.message.msg.channel != ToolUtil.currentChannel) {
						unread_messagelist[event.message.msg.channel] = chatChannel;
					}

					noticeWindow(event.message.msg);
				}
			} else {
				noticeWindow(event.message.msg);
			}

		}

		private function getChatByChannel(channel:String):ChatChannel {
			var chatChannel:ChatChannel;
			var c:ChatChannel;
			for each(c in ToolUtil.groupList) {
				if (c.channel == channel) {
					chatChannel = c;
					break;
				}
			}
			if (chatChannel == null) {
				for each(c in addressList.departMember) {
					if (c.channel == channel) {
						chatChannel = c;
						break;
					}
				}
			}
			if (chatChannel == null) {
				for each(c in addressList.userMember) {
					if (c.channel == channel) {
						chatChannel = c;
						break;
					}
				}
			}
			return chatChannel;
		}

		private function openChatByChannel(e:PaoPaoEvent):void {
			var chatChannel:ChatChannel = getChatByChannel(e.channel);
			if (chatChannel != null) {
				var event:ListClickEvent = new ListClickEvent("chat", chatChannel);
				listItemClick_handler(event);
			}

		}

		public function pushApp(e:MouseEvent):void {
			if (this.nativeWindow.displayState == NativeWindowDisplayState.NORMAL) {
				this.nativeWindow.startMove();
			}
		}

		public function changeCurrentUser(e:ChangeUserEvent):void {
			for (var p:String in chat_map) {
				chat_map[p].nativeWindow.close();
			}
		}


		private function flagTimeline(e:ChatTimelineEvent):void {
			for each(var c:ChatChannel in ToolUtil.groupList) {
				if (c.channel == e.channel) {
					c.unread = 0;
					delete unread_messagelist[c.channel];
					Pomelo.getIns().notify("connector.entryHandler.updatetimeline", {
						channel: e.channel,
						pid: ToolUtil.sessionUser.pid
					});
				}
			}
			ToolUtil.groupList.refresh();
		}

		private function unsubscribe_handler(e:ListClickEvent):void {
			var chat:ChatChannel = e.data as ChatChannel;
			if (chat == null) {
				trace("开启聊天框出错");
			} else {
				Pomelo.getIns().request("connector.entryHandler.unsubscribeChannel", {
					channel: chat.channel,
					pid: ToolUtil.sessionUser.pid
				}, function (data:Object):void {
					if (data.code == '500') {
						return;
					}
					if (data.code == 200) {
						var c:ChatPannel = chat_map[chat.channel];
						if (c != null) {
							c.close();
						}
						ToolUtil.groupList.removeItemAt(ToolUtil.groupList.getItemIndex(chat));
						return;
					}
				});
			}
		}

		public function listItemClick_handler(e:ListClickEvent):void {
			var chat:ChatChannel = e.data as ChatChannel;
			if (chat == null) {
				trace("开启聊天框出错");
			}
			var c:ChatPannel = chat_map[chat.channel];
			if (c == null) {
				c = new ChatPannel();
				c.transparent=true;
				c.systemChrome=NativeWindowSystemChrome.NONE;
				c.chatUser = chat;
				c.open();
				c.addEventListener(CloseEvent.CLOSE, closeChatPannel);
				c.addEventListener("ChatUser", listItemClick_handler);
				c.addEventListener(ChatTimelineEvent.Channel, flagTimeline);
				chat_map[chat.channel] = c;
			} else {
				c.nativeWindow.activate();
			}


//				
//				c = cbar.getView(mod);
//				if (c == null) {
//					var chatControl:ChatControl = new ChatControl();
//					chatControl.chatUser = chat;
//					c = chatControl;
//				}
//				if (c != null) {
//					c.label = chat.name;
//					c.flag = mod;
//					c.param = null;
//					if (!cbar.setView(mod)) {
//						cbar.addView(c);
//					}
//				}


		}

		public function closeChatPannel(event:Event):void {
			var c:ChatPannel = event.target as ChatPannel;
			c.removeEventListener(CloseEvent.CLOSE, closeChatPannel);
			if (c != null) {
				delete chat_map[c.chatUser.channel];
				ToolUtil.currentChannel = null;
			}
		}

		public function removeChannelHandler(event:PomeloEvent):void {
			var c:ChatPannel = chat_map[event.message.channel];
			if (c != null) {
				c.nativeWindow.close();
				delete chat_map[event.message.channel];
				ToolUtil.currentChannel = null;
			}
		}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout gap="0" paddingBottom="5" paddingLeft="5" paddingRight="5" >
			
		</s:VerticalLayout>
	</s:layout>
	<s:HGroup width="100%" height="55" verticalAlign="middle" >
		<uicontrol:HeadImage id="myhead" isPerson="true"  width="45" height="45">
			
		</uicontrol:HeadImage>
		<s:Label text="{ToolUtil.sessionUser.name}" />
		<s:Spacer width="100%">
			
		</s:Spacer>
		<uicontrol:WindowControlBtn maxshow="false" height="100%" window="{this}">
		</uicontrol:WindowControlBtn>
	</s:HGroup>
	<uicontrol:OrgChatList id="addressList"  type="chat" enabled="{ChatManager.pomelo_online}"
						   listItemClick="listItemClick_handler(event)"
						   width="100%" height="100%">
	</uicontrol:OrgChatList>
</s:Window>
