<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" 
						  xmlns:uicontrol="uicontrol.*"
						  width="700" height="500" borderVisible="false" backgroundAlpha="0">
	
	<fx:Script>
		<![CDATA[
			import events.CloseEvent;
			import events.PageChangeEvent;
			
			import httpcontrol.CHTTPService;
			import httpcontrol.HttpServiceUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import util.DateUtil;
			import util.ToolUtil;
			
			[Bindable]
			private var timelist:ArrayCollection=new ArrayCollection([{'label':'今天','mode':'today'},
				{'label':'昨天','mode':'yesterday'},
				{'label':'前天','mode':'beforeyesterday'},
				{'label':'本周','mode':'week'},
				{'label':'上周','mode':'beforeweek'},
				{'label':'本月','mode':'monthly'},
				{'label':'上月','mode':'beforemonthly'}]);
			
			[Bindable]
			private var list:ArrayCollection=new ArrayCollection();
			
			override public   function  init(e:FlexEvent):void{
                showLog();
                queryLog();
			}
			override public function closeContainer(e:CloseEvent):void{
				dispatchEvent(e);
			}
			
			private function showLog():void{
				
				if(logQZ.selectedItem==null){
					return;
				}
				var end:Date=new Date();
				var start:Date=new Date();
				
				switch(logQZ.selectedItem.mode){
					case "today":
						break;
					case "yesterday":
						start.date-=1;
						end.date-=1;
						break;
					case "beforeyesterday":
						start.date-=2;
						end.date-=2;
						break;
					case "week":
						if (start.day>0){
                            start.date-=(end.day-1);
						}else{
                            start.date-=6;
						}
							
						break;
					case "beforeweek":
						if (start.day>0){
							start.date-=(end.day-1);
						}else{
							start.date-=6;
						}
						if (end.day>0){
							end.date-=(end.day-1);
						}else{
							end.date-=6;
						}
                        start.date-=7;
						break;
					case "monthly":
                        start.date=1;
						break;
					case "beforemonthly":
						start.date-=start.date;
						end.date-=end.date;
                        start.date-=start.date;
						break;
					
				}
				startdate.selectedDate=start;
				enddate.selectedDate=end;
				queryLog();
				
			}
			
			private function queryparamchange():void{
				logQZ.selectedIndex=-1;
			}
			
			private function queryLog():void{
				var data:Object=new Object();
				data["start"] = DateUtil.dateLbl(startdate.selectedDate);
				data["end"] = DateUtil.dateLbl(enddate.selectedDate);
				HttpServiceUtil.getCHTTPServiceAndResult("/log/getMyHistory",queryLogResult,"POST").send(data);
			}
			
			private function queryLogResult(result:Object,e:ResultEvent):void{
				if(result.result){
					list.removeAll();
					list.addAll(new ArrayCollection(result.result as Array));
				}
				
			}

            private function showChangeMessage():void{
                if(logGrid.selectedItem==null){
                     logArea.text="";
                }else{
                    logArea.text=logGrid.selectedItem.change_message;
                }
            }
			
			
			private function getDataResult(o:Object,e:ResultEvent):void{
				if(o&&o.success){
					list = new ArrayCollection(o.result as Array);
				}
				
			}
			public function initpassword(e:Event):void{
				var data:Object=getData();
				if(data==null){
					return;
				}
				HttpServiceUtil.getCHTTPServiceAndResult("/ft/initUser",initUserResult,"POST").send(data);
			}
			
			private function initUserResult(result:Object,e:ResultEvent):void{
				if(result.success){
					Alert.show(result.message,"提示");
				}
			}
			
			
			public function getData():Object{
				var o:Object={};
				
				
				return o;
			}
			
			private function delContactAsk():void{
				
				Alert.show("确认移除选中的联系人?", "提示", Alert.YES | Alert.NO, null, delContact);
				
			}
			//删除日程
			private function delContact(e:mx.events.CloseEvent):void
			{
				if (e.detail == Alert.YES){
					var data:Object=new Object();
					var username:Array = new Array();
					for each(var item:Object in ToolUtil.contactsList){
						if(item.selected){
							username.push(item.username);
						}
					}
					data["usernames"] = username;
					data["do"] = "out";
					HttpServiceUtil.getCHTTPServiceAndResult("/ca/joinContacts",ToolUtil.contactsRefresh,"POST").send(data);
					
					
				}
			}
			private function addContact():void{
				var data:Object=new Object();
				var username:Array = new Array();
				for each(var item:Object in list){
					if(item.selected){
						username.push(item.username);
					}
				}
				if(username.length==0){
					Alert.show("请选择用户","警告");
					return;
				}
				data["usernames"] = username;
				data["do"] = "join";
				HttpServiceUtil.getCHTTPServiceAndResult("/ca/joinContacts",ToolUtil.contactsRefresh,"POST").send(data);
				
			}
			
			
			
			private function loadDataFault(e:FaultEvent):void{
				Alert.show('操作失败',"提示");
			}
			
			
			//新增，保存，删除的处理函数
			private function clickHander(e:ItemClickEvent):void{
				if(e.label=="新增"){
					add();
				}
				if(e.label=="修改"){
					
				}
				if(e.label=="删除"){
					del();
				}
				if(e.label=='同步数据'){
					//					InfoUtil.userRefresh(refreshScx);
					init(null);
				}
				//				if(e.label=='测试打开部门管理'){
				//					var obj:Object=new Object();
				//					obj['test']="测试";
				//					var evt:ChangeMenuEvent=new ChangeMenuEvent(ChangeMenuEvent.ChangeMenu_EventStr,"dept",obj,true)
				//					dispatchEvent(evt);
				//				}
				
			}
			
			public function add():void{
			}
			public function del():void{
				var userArr:ArrayCollection=new ArrayCollection();
				var obj:Object;
				var item:Object;
				for(var i:int=list.length-1;i>=0;i--){
					item=list.getItemAt(i);
					if(!item.selected){
						continue;
					}
					obj=new Object();
					if(item.hasOwnProperty("id")){
						obj.id=item.id;
						userArr.addItem(obj);
					}
					//					obj.name=item.name;
					
				}
				if(userArr.length>0){
//					ToolUtil.deptRefresh(refresh);
//					ToolUtil.areaRefresh(refresh);
//					ToolUtil.userRefresh(refresh);
					//					HttpServiceUtil.getCHTTPServiceAndResultAndFault("/htcsgl/_100_BaseInfosAction_deletedept.action",loadDataResult,loadDataFault,"POST").send(userArr);
				}
			}
			
			public function show(obj:Object):void{
			}
			
			
			
			public function refresh(result:Object,e:ResultEvent):void{
				if(result.success){
					add();
					init(null);
					//					InfoUtil.userRefresh(refreshScx);
				}
			}
			
			
				[Bindable]
				private var buttonArr:ArrayCollection=new ArrayCollection([{'label':'新增','ico':addimg},{'label':'修改','ico':saveimg},{'label':'同步数据','ico':refreshimg}]);
				
			private function pagechange(e:PageChangeEvent):void
				
			{
				
				//				datalist.dataProvider = e.Filter(datas)
				
			}
				
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RadioButtonGroup id="uTypeRadio" >
			
		</s:RadioButtonGroup>
	</fx:Declarations>
	<s:BorderContainer top="5" bottom="5" left="5" right="5"  borderVisible="false" color="0x333333" skinClass="skins.contentBoxSkin">
		<s:layout>
			<s:VerticalLayout verticalAlign="top" >
				
			</s:VerticalLayout>
		</s:layout>
		<s:BorderContainer  width="100%" height="45"   borderVisible="false" backgroundImage="{CBorderContainer.toolbgimg}">	
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" paddingLeft="25" gap="8">
					
				</s:HorizontalLayout>
			</s:layout>
			<s:ButtonBar id="logQZ" dataProvider="{timelist}"  selectedIndex="0"  chromeColor="#faf0cc"  labelField="label"  height="30" change="showLog()" >
			</s:ButtonBar>
			<s:Label text="时间范围：" />
			<mx:DateField id="startdate" formatString="YYYY/MM/DD" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" change="queryparamchange()" />
			<s:Label text="~"/>
			<mx:DateField id="enddate"  formatString="YYYY/MM/DD" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" change="queryparamchange()"/>
			<s:Button label="查询" click="queryLog()" />
			<s:CheckBox id="showUsername" label="显示用户名">
				
			</s:CheckBox>
		</s:BorderContainer>
		<s:BorderContainer  width="100%" height="100%"  backgroundAlpha="0"  borderVisible="false">	
			<s:layout>
				<s:HorizontalLayout  gap="8">
					
				</s:HorizontalLayout>
			</s:layout>
			
			<s:DataGrid id="logGrid" dataProvider="{list}"  width="500" height="100%" click="showChangeMessage()"   >
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="action_time" headerText="日期" width="120">
							
						</s:GridColumn>
						<s:GridColumn dataField="nickname" headerText="操作者" width="70">
							
						</s:GridColumn>
						<s:GridColumn dataField="username" headerText="操作者账号" visible="{showUsername.selected}" width="70">
							
						</s:GridColumn>
						<s:GridColumn dataField="action_flag" headerText="动作" width="40">
							
						</s:GridColumn>
                        <s:GridColumn dataField="object_type" headerText="对象类型" width="90">

						</s:GridColumn>
						<s:GridColumn dataField="object_repr" headerText="对象名称" >
							
						</s:GridColumn>



					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		
		<s:BorderContainer id="rightContainner" width="100%" height="100%" backgroundAlpha="0"  borderVisible="false">
			<s:layout>
				<s:VerticalLayout gap="5">
					
				</s:VerticalLayout>
				
			</s:layout>
			<s:TextArea id="logArea" width="100%" height="100%" editable="false">

			</s:TextArea>

		</s:BorderContainer>
		</s:BorderContainer>
	</s:BorderContainer>
</control:CBorderContainer>
