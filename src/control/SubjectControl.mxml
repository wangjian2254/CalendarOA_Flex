<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" width="700" height="700" borderVisible="false" backgroundAlpha="0" xmlns:uicontrol="uicontrol.*">
	<fx:Script>
		<![CDATA[
			import events.AutoGridEvent;
			import events.ChangeUserEvent;
			import events.CloseEvent;
			
			import httpcontrol.HttpServiceUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import util.DataUtil;

	        [Bindable]
	        private var buttonArr1:ArrayCollection = new ArrayCollection([
	            {'label': '刷新', 'ico': refreshimg, 'mode': 'refresh'},
	            {'label': '新增', 'ico': wximg, 'mode': 'add'}
	        ]);
			private var state:String="refresh";//refresh(查询状态),add(新增状态),mod(修改状态)del(删除状态)
	        [Bindable]
	        private var subjectArr:ArrayCollection = new ArrayCollection([
				{title:"java试题",kinds:"java>面向对象",bz:"对于面向对象的理解",rightnum:0,wrongnum:0,accuracy:0},
				{title:"java试题",kinds:"java>面向对象",bz:"对于面向对象的理解",rightnum:0,wrongnum:0,accuracy:0}
			]);
			[Bindable]
			private var subKindArr:ArrayCollection=new ArrayCollection([{"name":"java试题","id":1,"fatherid":null},{"name":"java面向对象题目","id":2,"fatherid":1},{"name":"java面向对象继承","id":3,"fatherid":2}]);
	        //新增，保存，删除,回复，转发的处理函数
	        //多个按钮点击事件的处理函数
	        private function clickHander(e:MouseEvent):void {
				ba1.requireSelection=true;
				var item:Object=ba1.selectedItem;
	            if (item.mode == 'refresh') {
					state="refresh";
					loadSubject();
	            }
				if (item.mode == 'add') {
					state="add";
					resetFormData();
					delBtn.enabled=false;
				}
	
	        }
			private var isPaging:Boolean;
			private function loadSubject():void{
				var o:Object={};//如果需要补齐查询参数
				o["kind"]=kindKey.text;
				var url:String= o["kind"]||o["kind"]==""? "/kaoshi/getSubjectAll":"/kaoshi/getSubjectByKind";
				isPaging= o["kind"]||o["kind"]==""?false:true;
				HttpServiceUtil.getCHTTPServiceAndResult(url, loadSubDataResult, "POST").send(o);
			}
			private function loadSubDataResult(result:Object, e:ResultEvent):void {
				if (result.success) {
					resetFormData();
					delBtn.enabled=false;
					var arr:Array;
					if(isPaging){
						pagebar1.mPageSize = result.result.limit;
						pagebar1.RecordCount = result.result.total;
						pagebar1.initPage();
						arr= result.result.list is Array ?  result.result.list : [];
					}else{
						arr= result.result is Array ?  result.result : [];
					}
					subjectArr.removeAll();
					subjectArr.addAll(new ArrayCollection(arr));
				}
			}
			private function savSubject():void{
				if(!isValid()){
					return;
				}
				var o:Object=getFormData();
				HttpServiceUtil.getCHTTPServiceAndResult("/kaoshi/updateSubject", savSubjectDataResult, "POST").send(o);
			}
			private function savSubjectDataResult(result:Object, e:ResultEvent):void {
				if (result.success) {
					loadSubject();
				}
			}
			private function delSubject():void{
				state="del";
				Alert.show("是否删除","提示",Alert.YES|Alert.NO,null,function(e:mx.events.CloseEvent):void{
					if(e.detail==Alert.YES){
						var o:Object=getFormData();
						HttpServiceUtil.getCHTTPServiceAndResult("/kaoshi/delSubject", delSubjectDataResult, "POST").send(o);
					}
				});
			}
			private function delSubjectDataResult(result:Object, e:ResultEvent):void {
				if (result.success) {
					loadSubject();
				}
			}
			private function delOption():void{
				Alert.show("是否删除","提示",Alert.YES|Alert.NO,null,function(e:mx.events.CloseEvent):void{
					if(e.detail==Alert.YES){
						var o:Object={};
						o["id"]=optionGrid.selectedItem["id"];
						HttpServiceUtil.getCHTTPServiceAndResult("/kaoshi/delOption", delOptionDataResult, "POST").send(o);
					}
				});
			}
			private function delOptionDataResult(result:Object, e:ResultEvent):void {
				if (result.success) {
					var dp:ArrayCollection=optionGrid.dataProvider as ArrayCollection;
					dp.removeItemAt(optionGrid.selectedIndex);
				}
			}
			private function resetFormData():void{
				title.text="";
				subKind.selectedIndex=-1;
				if(optionGrid.dataProvider==null){
					optionGrid.dataProvider=new ArrayCollection();
				}else{
					optionGrid.dataProvider.removeAll();
				}
				bz.text="";
			}
			private function getFormData():Object{
				var o:Object={};
				var n:Object=subjectGrid.selectedItem;
				if((state=="mod"||state=="del")&&!n){
					o["id"]=n["id"];
				}
				if(state=="add"){
					o["id"]=null;
				}
				if((state=="add"||state=="del"||state=="refresh"||state=="mod")&&!n){
					o["id"]=null;
				}
				o["title"]=title.text;
				var kinds:Array = subKind.selectedItem ? [subKind.selectedItem["id"]] : [];
				o["kinds"]=kinds;
				o["bz"]=bz.text;
				var dp:ArrayCollection=optionGrid.dataProvider as ArrayCollection;
				var arr:Array=(dp.toArray()).slice(0,dp.length-1);
				DataUtil.serializationArr("","option_",o,arr);
				return o;
			}
			private function setFormData(o:Object):void{
				title.text=o["title"];
				subKind.selectedIndex=o["kinds"][0];
				bz.text=o["bz"];
				var dp:ArrayCollection=optionGrid.dataProvider as ArrayCollection;
				dp.removeAll();
				var optiosArr:Array= o["options"] is Array?o["options"]:[];
				dp.addAll(new ArrayCollection(o["options"]));
			}
			private function isValid():Boolean{
				var o:Object=getFormData();
				if(o["title"]==""){
					Alert.show("题目不能为空","提示");
					return false;
				}
				if(subKind.text==""){
					Alert.show("分类不能为空","提示");
					return false;
				}
				if(optionGrid.dataProvider.length<=1){
					Alert.show("选项不能为空","提示");
					return false;
				}
				var arr:Array=optionGrid.dataProvider.toArray();
				for(var i:int;i<(arr.length-2);i++){
					if(arr[i]["content"]==""){
						Alert.show("选项内容不能为空","提示");
						return false;
					}
					if(arr[i]["is_right"]!=true){
						arr[i]["is_right"]=false;
					}
				}
				if(o["bz"]==""){
					Alert.show("备注不能为空","提示");
					return false;
				}
				return true;
			}
			private function seletSubjec():void{
				ba1.requireSelection=false;
				ba1.selectedIndex=-1;
				var o:Object=subjectGrid.selectedItem;
				state="mod";
				setFormData(o);
				delBtn.enabled=true;
			}
	        override public function init(e:FlexEvent):void {
				optionGrid.dataProvider=new ArrayCollection([{}]);
//				loadSubject();
	        }
	
	        override public function changeCurrentUser(e:ChangeUserEvent):void {
	
	        }
	
	        override public function closeContainer(e:CloseEvent):void {
	
	        }
	
	        // 重新进入时执行
	        override public function reloadParamData(e:FlexEvent):void {
	        }
	
	
			protected function optionGrid_optionHandler(event:AutoGridEvent):void
			{	
				var data:Object=event.data;
				if(event.type==AutoGridEvent.DELETE){
					if(!data["id"]||data["id"]==""){
						var dataProvider:ArrayCollection=optionGrid.dataProvider as ArrayCollection;
						dataProvider.removeItemAt(data.rowIndex);
					}else{
						delOption();
					}
				}
			}

        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:BorderContainer top="5" bottom="5" left="5" right="5"  borderVisible="false" color="0x333333" skinClass="skins.contentBoxSkin">
		<s:layout>
			<s:VerticalLayout>
				
			</s:VerticalLayout>
		</s:layout>
		<s:BorderContainer left="0" top="0" height="45" width="100%" borderVisible="false" backgroundImage="{CBorderContainer.toolbgimg}">
			<s:layout>
				<s:HorizontalLayout gap="20" verticalAlign="middle" paddingLeft="20">
					
				</s:HorizontalLayout>
			</s:layout>
			<s:HGroup height="20">
				<s:Label text="关键字" height="100%" verticalAlign="middle">
				</s:Label>
				<s:TextInput id="kindKey" height="100%">
				</s:TextInput>
			</s:HGroup>
			<s:ButtonBar id="ba1" dataProvider="{buttonArr1}" selectedIndex="0" doubleClickEnabled="true"  chromeColor="#faf0cc"  labelField="label" iconField="ico"  height="30"  requireSelection="true" click="clickHander(event)">
			</s:ButtonBar>
		</s:BorderContainer>
		<s:BorderContainer height="100%" width="100%" borderVisible="false"  >
			<s:layout>
				<s:HorizontalLayout gap="2">
					
				</s:HorizontalLayout>
			</s:layout>
			<s:VGroup height="100%" width="430" >
				<mx:DataGrid id="subjectGrid" height="100%" width="100%" dataProvider="{subjectArr}" itemClick="seletSubjec();">
					<mx:columns>
						<mx:DataGridColumn headerText="题目" dataField="title">
							
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="分类" dataField="kinds">
							
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="正确率" dataField="accuracy">
							
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
				<uicontrol:Pageing id="pagebar1" infolbl="false">
				</uicontrol:Pageing>
			</s:VGroup>
			<s:BorderContainer width="100%" height="100%" borderVisible="true">
				<s:layout>
					<s:HorizontalLayout>
						
					</s:HorizontalLayout>
				</s:layout>
				<s:Form width="100%" height="100%">
					<s:FormItem label="题目">
						<s:TextInput id="title" maxChars="200" width="200" prompt="新增题目" height="100%">
						</s:TextInput>
					</s:FormItem>
					<s:FormItem label="分类">
						<mx:ComboBox id="subKind" width="200" height="100%" dataProvider="{subKindArr}" labelField="name" selectedIndex="-1">
						</mx:ComboBox>
					</s:FormItem>
					<mx:FormItem width="400" minWidth="400">
						<uicontrol:AutoGrid editable="true" id="optionGrid" width="100%" autoDelete="optionGrid_optionHandler(event)" >
							<uicontrol:columns>
								<mx:DataGridColumn headerText="选项内容" dataField="content">
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="是否正确" dataField="is_right" width="70" editable="false">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Canvas width="100%">
												<mx:VBox horizontalAlign="center" width="100%">
													<fx:Script>
														<![CDATA[
															import mx.events.ListEvent;
															private var _data:Object;
															override public function set data(o:Object):void{
																_data=o;
																is_right.selected=o["is_right"];
															}
															private function clickHandler():void{
																_data["is_right"]=is_right.selected;
																dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK,false,false,-1,-1,null,this));
															}
														]]>
													</fx:Script>
													<mx:CheckBox id="is_right" click="clickHandler()">
													</mx:CheckBox>
												</mx:VBox>
											</mx:Canvas>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</uicontrol:columns>
						</uicontrol:AutoGrid>
					</mx:FormItem>
					<s:FormItem label="备注">
						<s:TextArea id="bz" width="200" height="150">
							
						</s:TextArea>
					</s:FormItem>
					<mx:ControlBar>
						<s:Button id="savBtn" label="保存" color="white" chromeColor="red" height="25" click="savSubject();">
						</s:Button>
						<s:Button id="delBtn" label="删除" height="25"  enabled="false" click="delSubject();">
						</s:Button>
					</mx:ControlBar>
				</s:Form>
			</s:BorderContainer>
			
		</s:BorderContainer>
	</s:BorderContainer>
</control:CBorderContainer>
