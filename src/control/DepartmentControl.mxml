<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                          xmlns:s="library://ns.adobe.com/flex/spark"
                          xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*"
                          xmlns:uicontrol="uicontrol.*" xmlns:fc="http://www.adobe.com/2006/fc"
                          width="700" height="500" borderVisible="false" backgroundAlpha="0">
	
	<fx:Script>
		<![CDATA[
			import events.CloseEvent;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
            import mx.utils.ObjectUtil;

            import uicontrol.DepartmentItem;

            import util.ToolUtil;

            private var departmentTimeline:Number = 0;

            [Bindable]
            private var departmentList :ArrayCollection =null;

            private var departChart:Object = null;
            private var rootDepart:Object = null;

			

			
			override public   function  init(e:FlexEvent):void{
                initDepartment();

				
			}
			override public function closeContainer(e:CloseEvent):void{
				dispatchEvent(e);
				
			}
            override public function reloadParamData(e:FlexEvent):void {
                initDepartment();


            }

            private function initDepartment():void{
                if(departmentTimeline==ToolUtil.departMentTimeline){
                    return;
                }
                departmentList = ObjectUtil.copy(ToolUtil.departMentList) as ArrayCollection;
                departChart = new Object();
                var depart:Object = null;
                var departitem:DepartmentItem = null;
                for(var i:int=0;i<departmentList.length;i++){

                    depart = departmentList.getItemAt(i);
                    departChart['d'+depart.id]=depart;
                    if(!depart.father){
                        rootDepart = depart;
                    }
                }
                for(var i:int=0;i<departmentList.length;i++){

                    depart = departmentList.getItemAt(i);
                    if(depart.father){
                         if(!departChart['d'+depart.father].hasOwnProperty("children")){
                             departChart['d'+depart.father]['children']=[];
                         }
                        departChart['d'+depart.father]['children'].push(depart);

                    }
                    departitem = new DepartmentItem();
                    departitem.department = depart;
                    departitem.x=i*200;
                    departitem.y=i*200;
                    orgChart.addElement(departitem);
                }


                departmentTimeline = ToolUtil.departMentTimeline;
            }

            private function calculateDepartmentCoordinateByChildren(departmentItem:Object):void{
                var x1:int = 0;
                var x2:int = 0;
                var d:Object = null;
                if(!departmentItem.hasOwnProperty("children")){
                    return;
                }
                for(var i:int=0;i<departmentItem.children.length;i++){
                    d = departmentItem.children[i];
                    if(d.x < x1){
                        x1 = d.x;
                    }
                    if((d.x + d.width) > x2){
                        x2 = d.x + d.width;
                    }
                }

                departmentItem.x = (x2 - x1)/2 - departmentItem.width/2;

                if(!departChart.hasOwnProperty('d'+departmentItem.father)){
                    return;
                }
                var fatherDepart:Object = departChart['d'+departmentItem.father];
                var p:Object = null;
                for(var i:int=0;i<fatherDepart.children.length;i++){
                    d = fatherDepart.children[i];
                    if(p == null&& d.id != departmentItem.id){
                        continue;
                    }
                    if(p == null){
                        d.x = x2+50;
                    }else{
                        d.x = p.x + p.width + 50;
                    }


                    p = fatherDepart.children[i];
                }
                calculateDepartmentCoordinateByChildren(fatherDepart);

            }

            private function calculateDepartmentCoordinate(departmentItem:Object):void{
                var x:int = departmentItem.x;
                var y:int = departmentItem.y;
                if(departmentItem.hasOwnProperty("children")){
                    var d:Object = null;
                    var p:Object = null;
                    for(var i:int=0;i<departmentItem.children.length;i++){
                        d = departmentItem.children[i];

                        if(p==null){
                            d.x = x;
                        }else{
                            d.x = p.x + p.width+50;
                        }

                        d.y = y+departmentItem.height+50;

                        p= departmentItem.children[i];

                    }

                    calculateDepartmentCoordinateByChildren(departmentItem);

                    for(var i:int=0;i<departmentItem.children.length;i++){
                        d = departmentItem.children[i];
                        calculateDepartmentCoordinate(d);
                    }

                }
            }

            private function addMember():void{

            }


        ]]>
	</fx:Script>
    <s:BorderContainer top="5" bottom="5" left="5" right="5"  borderVisible="false" color="0x333333" skinClass="skins.contentBoxSkin">
        <s:layout>
            <s:VerticalLayout gap="0">

            </s:VerticalLayout>
        </s:layout>
        <s:Scroller width="100%" height="100%">
            <s:Group width="100%" height="100%">
                <s:BorderContainer id="orgChart" borderVisible="false">

                </s:BorderContainer>
            </s:Group>
        </s:Scroller>
        <s:BorderContainer width="100%" height="45" borderVisible="false" cornerRadius="7" backgroundImage="{toolbgimg}">
            <s:layout>
                <s:HorizontalLayout gap="5" horizontalAlign="left" verticalAlign="middle"></s:HorizontalLayout>
            </s:layout>
            <s:Label text="添加成员:"></s:Label>
            <s:ComboBox id="memberBox" dataProvider="{ToolUtil.memberList}" labelField="name" width="150" change="addMember()"  >

            </s:ComboBox>
        </s:BorderContainer>
        <s:Scroller width="100%" height="300">
            <s:Group width="100%" height="100%">
                <s:BorderContainer id="memebers" width="100%" borderVisible="false">
                     <s:layout>
                         <s:TileLayout columnAlign="justifyUsingGap" horizontalGap="5" verticalGap="5"></s:TileLayout>
                     </s:layout>
                </s:BorderContainer>
            </s:Group>
        </s:Scroller>
    </s:BorderContainer>


</control:CBorderContainer>
