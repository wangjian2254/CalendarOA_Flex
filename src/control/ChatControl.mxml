<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" width="700" height="700" borderVisible="false" backgroundAlpha="0" xmlns:uicontrol="uicontrol.*">
	<fx:Script>
		<![CDATA[
        import control.window.GroupMemberPanel;
        import control.window.GroupPanel;
        import control.window.PersonPanel;

        import events.ChangeUserEvent;
        import events.ChatTimelineEvent;
        import events.CloseEvent;
        import events.ListClickEvent;

        import httpcontrol.HttpServiceUtil;

        import json.JParser;

        import mx.collections.ArrayCollection;
        import mx.controls.Menu;
        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.MenuEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import org.idream.pomelo.Pomelo;
        import org.idream.pomelo.PomeloEvent;

        import util.ChatManager;
        import util.DateUtil;
        import util.RightClickManager;
        import util.ToolUtil;
        import util.UUIDUtil;

        [Bindable]
        private var chatsArr:ArrayCollection = new ArrayCollection();

        [Bindable]
        public var members:ArrayCollection;

        [Bindable]
        public var chatUser:Object;


        [Bindable]
        public var type:String = "d";//部门 为“d” 任务为 “t” 讨论组为：“g”


        private function getChannel(pids:Array):String {
            var channel:String;
            if (members == null) {
                if (ToolUtil.sessionUser.pid > chatUser.id) {
                    channel = chatUser.id + "p" + ToolUtil.sessionUser.pid;
                } else {
                    channel = ToolUtil.sessionUser.pid + "p" + chatUser.id;
                }
                pids.push(chatUser.id);
                pids.push(ToolUtil.sessionUser.pid);
            } else {
                for each(var p:Object in members) {
                    pids.push(p.id);
                }
                if (chatUser.channel) {
                    channel = chatUser.channel;
                } else {
                    channel = type + chatUser.id;
                }

            }
            return channel;
        }

        private function flagTimeline():void {
            if (this.visible) {
                var event:ChatTimelineEvent = new ChatTimelineEvent(ChatTimelineEvent.Channel, true);
                event.channel = getChannel(new Array());
                event.flag = this.flag;
                dispatchEvent(event);
            }
        }

        private var channel:String;

        override public function init(e:FlexEvent):void {

//            chatsArr.addEventListener(CollectionEvent.COLLECTION_CHANGE, showLastMsg);
            if (members == null) {
                horGroup.validateNow();
                addressList.visible = false;
                horGroup.removeElement(addressList);
            } else {
                addressList.visible = true;
            }
            if (chatUser) {
                head.source = chatUser.icon;
                nameLabel.text = chatUser.name;
            }
            var pids:Array = new Array();
            channel = getChannel(pids);
            if (type == "p") {


                Pomelo.getIns().request("connector.entryHandler.createChannel", {channel: channel, users: pids}, function (data:Object):void {
                    if (data.code == 200) {

                    }
                });
            }
            if (type != 'g') {
                quiteButton.visible = false;

            }
            memberButton.visible = false;
            if (type == 'g' && chatUser.author == ToolUtil.sessionUser.pid) {
                memberButton.visible = true;
            }

            Pomelo.getIns().addEventListener('onChat', chatHandler);
            getHistoryChat();
            flagTimeline();
            Pomelo.getIns().addEventListener('quiteChannel', quiteChannelHandler);
            Pomelo.getIns().addEventListener('joinChannel', joinChannelHandler);
        }

        public function getHistoryChat():void {
            var timeline:String;
            if (chatsArr.length > 0) {
                timeline = chatsArr.getItemAt(0)._id;
            }
            var pids:Array = new Array();
            var channel:String = getChannel(pids);
            ;
            Pomelo.getIns().request("connector.entryHandler.history", {channel: channel, id: timeline}, function (data:Object):void {
                if (data.code == 200) {
                    var chats:ArrayCollection = new ArrayCollection(data.chats as Array);
                    if (chats.length == 0) {
                        return;
                    }

                    if (chats.length < 30) {
                        historyButton.enabled = false;
                    }
                    if (chatsArr.length == 0) {
                        chatsArr.addAll(chats);
                    } else {
                        chatsArr.addAllAt(chats, 0);
                    }
                    setPreDate(chatsArr);
                    showLastMsg(chats.length - 1);
                }
            })
        }

        private function setPreDate(list:ArrayCollection):void {
            var pre:Object;
            for each(var item:Object in list) {
                if (pre != null) {
                    item.predate = pre.d;
                }
                pre = item;
            }
        }

        public function showLastMsg(index:Number = -1):void {
            if (index < 0) {
                if (chatsArr.length > 0) {
                    chatList.validateNow();
                    chatList.ensureIndexIsVisible(chatsArr.length - 1);
                    chatList.validateNow();
                    chatList.ensureIndexIsVisible(chatsArr.length - 1);

                }
            } else {
                chatList.validateNow();
                chatList.ensureIndexIsVisible(index);
                chatList.validateNow();
                chatList.ensureIndexIsVisible(index);
            }

        }

        override public function changeCurrentUser(e:ChangeUserEvent):void {
            Pomelo.getIns().addEventListener('onChat', chatHandler);
        }

        override public function closeContainer(e:CloseEvent):void {
            Pomelo.getIns().removeEventListener('onChat', chatHandler);
            dispatchEvent(e);
        }

        public function quiteChannelHandler(event:PomeloEvent):void {
            if(channel!=event.message.channel){
                return;
            }
            members.refresh();
            for each(var person:Object in members) {
                if (person.id == event.message.pid) {
                    var i:int = members.getItemIndex(person);
                    if (i > -1) {
                        members.removeItemAt(i);
                    }
                    return;
                }
            }

        }

        public function joinChannelHandler(event:PomeloEvent):void {
            if(channel!=event.message.channel){
                return;
            }
            members.refresh();
            for each(var p:Object in members) {
                if (p.id == event.message.pid) {
                    return;
                }
            }
            for each(var person:Object in ToolUtil.memberList) {
                if (person.id == event.message.pid) {
                    members.addItem(person);
                    return;
                }
            }
        }

        private function chatHandler(event:PomeloEvent):void {
            if (event.message.msg.channel != channel) {
                return;
            }
            chatsArr.addItem(event.message.msg);
            setPreDate(chatsArr);
            showLastMsg();
            flagTimeline();

        }

        // 重新进入时执行
        override public function reloadParamData(e:FlexEvent):void {
            if (param) {
                if (param.hasOwnProperty("messageType")) {

                }

            }
            super.reloadParamData(e);
        }

        private var contextMenuItems:ArrayCollection;

        private function listItemClick_handler(e:ListClickEvent):void {
            contextMenuItems = new ArrayCollection([
                {"icon": CBorderContainer.wximg, "text": "发送消息", "mode": "chat", "selectedUser": e.data},
                {"icon": CBorderContainer.wximg, "text": "把'" + e.data.name + "'加入常用联系人", "mode": "addcontact", "selectedUser": e.data},
                {"icon": CBorderContainer.saveimg, "text": "查看'" + e.data.name + "'的信息", "mode": "show", "selectedUser": e.data}
            ]);
            for each(var contact:Object in ToolUtil.contactsList) {
                if (e.data.id == contact.id) {
                    contextMenuItems = new ArrayCollection([
                        {"icon": CBorderContainer.wximg, "text": "发送消息", "mode": "chat", "selectedUser": e.data},
                        {"icon": CBorderContainer.saveimg, "text": "查看'" + e.data.name + "'信息", "mode": "show", "selectedUser": e.data}
                    ]);
                }
            }
            if (e.data.id == ToolUtil.sessionUser.pid) {
                contextMenuItems = new ArrayCollection([
                    {"icon": CBorderContainer.saveimg, "text": "查看'" + e.data.name + "'信息", "mode": "show", "selectedUser": e.data}
                ]);
            }


            var menu:Menu = RightClickManager.getMenu(this, contextMenuItems, false);

            menu.labelField = "text";
            menu.iconField = "icon";
            menu.variableRowHeight = true;
            menu.rowHeight = 35;
            menu.addEventListener(MenuEvent.ITEM_CLICK, menuItemClickHandler);

//              var point:Point = new Point(mouseX,mouseY);
//              point = localToGlobal(point);
            menu.show(stage.mouseX - 120, stage.mouseY);
        }

        private function menuItemClickHandler(e:MenuEvent):void {
            var item:Object = e.item;
            var mod:String = item.mode;
            switch (mod) {
                case 'chat':
                    var chatevent:ListClickEvent = new ListClickEvent("ChatUser", e.item.selectedUser);
                    dispatchEvent(chatevent);
                    break;
                case 'addcontact':
                    var param:Object = new Object();
                    param["pid"] = e.item.selectedUser.id;
                    HttpServiceUtil.getCHTTPServiceAndResult("/riliusers/addPersonContact", function (result:Object, event:ResultEvent):void {
                        ToolUtil.contactsRefresh();
                    }, "POST").send(param);
                    break;
                case 'show':
                    var p:PersonPanel = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, PersonPanel, true) as PersonPanel;
                    p.personData = e.item.selectedUser;
                    break;

            }

        }

        private function chatUserPanel():void {
            var chatevent:ListClickEvent = new ListClickEvent("ChatUser", addressList.selectedItem);
            dispatchEvent(chatevent);
        }

        private function chatItemClick_handler(e:ListClickEvent):void {

        }

        private function createGroup():void {
            var gp:GroupPanel = PopUpManager.createPopUp(this, GroupPanel, true) as GroupPanel;
            if (members == null) {
                var m:ArrayCollection = new ArrayCollection();
                for each(var p:Object in ToolUtil.memberList) {
                    if (ToolUtil.sessionUser.pid == p.id || chatUser.id == p.id) {
                        m.addItem(p);
                    }
                }
                gp.chatmember = m;
            } else {
                gp.chatmember = members;
            }
            gp.addEventListener("ChatUser", function (e:ListClickEvent):void {
                dispatchEvent(e);
            });

        }

        protected function sendBTN_clickHandler(event:MouseEvent = null):void {
            trace("//****TextInputer.sendBTN_clickHandler 执行****//");
            var _re:RegExp = /^\s*$/;
            var __msg:String = ti.text;
            if (_re.test(__msg))
            //如果输入的字符串仅包含空格、回车或者空，就不能发送信息
            {
                ti.setFocus();
                return;
            }
            var chat:Object = new Object();

            chat['id'] = UUIDUtil.create();
            chat['te'] = __msg;
            chat['co'] = cp.selectedColor;
//            chat['we'] = bBTN.selected?'bold':'normal';
//            chat['st'] = iBTN.selected?'italic':'normal';
//            chat['de'] = uBTN.selected?'underline':'none';
//            chat['si'] =ns.value ;
            chat['d'] = DateUtil.dateLblChat(new Date());

            if (members == null) {
                ChatManager.sendMessageToPerson(chatUser.id, chat, function (data:Object):void {
                    al(data, chat);
                });
            } else {
                if (chatUser.channel) {
                    ChatManager.sendMessageToChannel(chatUser.channel, chat, function (data:Object):void {
                        al(data, chat);
                    });
                } else {
                    ChatManager.sendMessageToDeparment(chatUser.id, type, chat, function (data:Object):void {
                        al(data, chat);
                    });
                }

            }


            ti.text = '';
            ti.setFocus();
        }

        private function al(data:Object, chat:Object):void {
            trace("chat:" + JParser.encode(data));

        }

        private function pressEnter(event:FlexEvent):void {
            sendBTN_clickHandler();
        }


        private function quiteGroup():void {
            Pomelo.getIns().notify("connector.entryHandler.quiteChannel", {pid: ToolUtil.sessionUser.pid, channel: getChannel(new Array())});
        }


        private function memberGroup():void {
            var gp:GroupMemberPanel = PopUpManager.createPopUp(this, GroupMemberPanel, true) as GroupMemberPanel;
            gp.chatmember = members;
            gp.channel = getChannel(new Array());
        }
        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<control:layout>
		<s:VerticalLayout gap="0" >
			
		</s:VerticalLayout>
	</control:layout>

    <s:HGroup id="horGroup" width="100%" height="100%">
        <s:VGroup   width="100%" height="100%">
            <s:BorderContainer width="100%" height="47" backgroundImage="{CBorderContainer.toolbgimg}" borderVisible="false">
                <s:layout>
                    <s:HorizontalLayout paddingLeft="10" gap="5" paddingRight="15" verticalAlign="middle"></s:HorizontalLayout>
                </s:layout>
                <s:Image id="head" width="45" height="45"></s:Image>
                <s:Label id="nameLabel" textDecoration="underline"  ></s:Label>

                <mx:Spacer width="100%" height="10"/>
                <s:Button id="quiteButton" label="退出讨论组" width="100" height="25" click="quiteGroup()"  />
                <s:Button id="memberButton" label="成员管理" width="100" height="25" click="memberGroup()"  />
                <s:Button id="usersButton" label="创建讨论组" width="100" height="25" click="createGroup()"  />
                <s:Button id="historyButton" label="加载历史记录" width="150" height="25" click="getHistoryChat()"  />
            </s:BorderContainer>
            <uicontrol:AddressList id="chatList"  dataProvider="{chatsArr}"
                                   listItemClick="chatItemClick_handler(event)"
                                   itemRenderer="uicontrol.renderer.ChatItemRenderer" width="100%" height="100%">
            </uicontrol:AddressList>

            <!--<s:TextArea id="ti" width="100%" height="50"-->
                        <!--paddingTop="10" paddingBottom="5" paddingLeft="5" paddingRight="5"-->
                        <!--focusEnabled="true" fontLookup="device"-->
                        <!--fontFamily="simsun,MINGLIU"-->
                        <!--alignmentBaseline="ideographicCenter"-->
                        <!--color="{cp.selectedColor}"-->
                        <!--fontWeight="{bBTN.selected?'bold':'normal'}"-->
                        <!--fontStyle="{iBTN.selected?'italic':'normal'}"-->
                        <!--textDecoration="{uBTN.selected?'underline':'none'}"-->
                        <!--fontSize="{ns.value}"-->
                        <!--editable="true"-->
                        <!--keyUp="pressEnter(event)"-->
                    <!--/>-->
            <s:HGroup width="100%" height="50" horizontalAlign="left" verticalAlign="middle">
                <mx:ColorPicker id="cp"/>
                <s:TextInput  id="ti" prompt="回车(Enter)发送" width="100%" height="45" color="{cp.selectedColor}" enter="pressEnter(event)" />
                <!--<s:Button id="sendBTN" label="发送(Enter键)" chromeColor="#ff0000" color="#ffffff" width="120" height="25" click="sendBTN_clickHandler(event)"/>-->
                <s:Button  label="清空" width="80" height="25" click="{ti.text='';}"  />
            </s:HGroup>

        </s:VGroup>

            <uicontrol:AddressList  id="addressList" dataProvider="{members}"
                                   doubleClickEnabled="true" doubleClick="chatUserPanel()" toolTip="双击发送信息"
                                   itemRenderer="uicontrol.renderer.AddressItemRenderer" width="150" height="100%">
            </uicontrol:AddressList>


    </s:HGroup>


</control:CBorderContainer>
