<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" width="700" height="700" borderVisible="false" backgroundAlpha="0" xmlns:uicontrol="uicontrol.*">
	<fx:Script>
		<![CDATA[

        import events.ChangeUserEvent;
        import events.CloseEvent;
        import events.ListClickEvent;

        import json.JParser;


        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.events.FlexEvent;
        import mx.utils.ObjectUtil;

        import org.idream.pomelo.Pomelo;
        import org.idream.pomelo.PomeloEvent;

        import util.ChatManager;

        import util.DateUtil;

        import util.ToolUtil;
        import util.UUIDUtil;

        [Bindable]
        private var chatsArr:ArrayCollection=new ArrayCollection();

        [Bindable]
        public var members:ArrayCollection;

        [Bindable]
        public var chatUser:Object;


        [Bindable]
        public var type:String="d";//部门 为“d” 任务为 “t” 讨论组为：“g”




        override public function init(e:FlexEvent):void {
//            chatsArr.addEventListener(CollectionEvent.COLLECTION_CHANGE, showLastMsg);
            if(members==null){
                horGroup.validateNow();
                addressList.visible=false;
            }else{
                addressList.visible=true;
            }
            if(chatUser){
                head.source = chatUser.icon;
                nameLabel.text = chatUser.name;
            }
            var pids:Array=new Array();

            var channel:String;
            if(members==null){
                if(ToolUtil.sessionUser.pid>chatUser.id){
                    channel=chatUser.id+"p"+ToolUtil.sessionUser.pid;
                }else{
                    channel=ToolUtil.sessionUser.pid+"p"+chatUser.id;
                }
                pids.push(chatUser.id);
                pids.push(ToolUtil.sessionUser.pid);
            }else{
                for each(var p:Object in members){
                    pids.push(p.id);
                }
                if(chatUser.channel){
                    channel = chatUser.channel;
                }else{
                    channel = type+chatUser.id;
                }

            }
            Pomelo.getIns().request("connector.entryHandler.createChannel",{channel:channel,users:pids},function(data:Object):void{
                if(data.code==200){

                }
            })

//            Pomelo.getIns().addEventListener("pStatus",changeMember);
//            Pomelo.getIns().addEventListener("onLine",changeMember);
            Pomelo.getIns().addEventListener('onChat', chatHandler);
            getHistoryChat();
        }

        public function getHistoryChat():void{
            var timeline:String;
            if(chatsArr.length>0){
                timeline = chatsArr.getItemAt(0)._id;
            }
            var channel:String;
            if(members==null){
                if(chatUser.id>ToolUtil.sessionUser.pid){
                    channel=ToolUtil.sessionUser.pid+"p"+chatUser.id;
                }else{
                    channel=+chatUser.id+"p"+ToolUtil.sessionUser.pid;
                }
            }else{
                channel=type+chatUser.id;
            }
            Pomelo.getIns().request("connector.entryHandler.history",{channel:channel,id:timeline},function(data:Object):void{
                if(data.code==200){
                    var chats:ArrayCollection = new ArrayCollection(data.chats as Array);
                    if(chats.length==0){
                        return;
                    }

                    if(chats.length<30){
                        historyButton.enabled=false;
                    }
                    if(chatsArr.length==0){
                        chatsArr.addAll(chats);
                    }else{
                        chatsArr.addAllAt(chats,0);
                    }
                    setPreDate(chatsArr);
                    showLastMsg(chats.length-1);
                }
            })
        }

        private function setPreDate(list:ArrayCollection):void{
            var pre:Object;
            for each(var item:Object in list){
                if(pre!=null){
                    item.predate=pre.d;
                }
                pre=item;
            }
        }

        public function showLastMsg(index:Number=-1):void{
            if(index<0){
                if(chatsArr.length>0){
                    chatList.validateNow();
                    chatList.ensureIndexIsVisible(chatsArr.length-1);
                    chatList.validateNow();
                    chatList.ensureIndexIsVisible(chatsArr.length-1);

                }
            }else{
                chatList.validateNow();
                chatList.ensureIndexIsVisible(index);
                chatList.validateNow();
                chatList.ensureIndexIsVisible(index);
            }

        }
        override public function changeCurrentUser(e:ChangeUserEvent):void {
//            Pomelo.getIns().addEventListener("pStatus",changeMember);
//            Pomelo.getIns().addEventListener("onLine",changeMember);
            Pomelo.getIns().addEventListener('onChat', chatHandler);
        }

        override public function closeContainer(e:CloseEvent):void {
//            Pomelo.getIns().removeEventListener("pStatus",changeMember);
//            Pomelo.getIns().removeEventListener("onLine",changeMember);
            Pomelo.getIns().removeEventListener('onChat', chatHandler);

            dispatchEvent(e);
        }

        private function chatHandler(event:PomeloEvent):void{
//            if(event.message.msg.o==chatUser.id || event.message.msg.t == chatUser.id){
//                if(event.message.msg.f==ToolUtil.sessionUser.pid){
////                    for each(var chat:Object in chatsArr){
////                        if(event.message.msg.id==chat.id){
////                            chat.status="success";
////                        }
////                    }
////                    chatsArr.refresh();
//                }else{
//
//                }
//
//            }
            chatsArr.addItem(event.message.msg);
            setPreDate(chatsArr);
            showLastMsg();

        }


//        private function changeMember(e:Event=null):void{
//            for each(var member:Object in members){
//                member['online']=false;
//            }
//            for each(member in members){
//                for (var p:String in ChatManager.userStatus){
//                     if(member.id == p.split("*")[0]){
//                         member['online']=true;
//                     }
//                }
//            }
//            if(members!=null){
//                members.refresh();
//            }
//        }



        // 重新进入时执行
        override public function reloadParamData(e:FlexEvent):void {
            if (param) {
                if (param.hasOwnProperty("messageType")) {

                }

            }
            super.reloadParamData(e);
        }


        private function listItemClick_handler(e:ListClickEvent):void{

        }

        private function chatItemClick_handler(e:ListClickEvent):void{

        }

        protected function sendBTN_clickHandler(event:MouseEvent=null):void
        {
            trace("//****TextInputer.sendBTN_clickHandler 执行****//");
            var _re:RegExp = /^\s*$/;
            var __msg:String = ti.text;
            if(_re.test(__msg))
            //如果输入的字符串仅包含空格、回车或者空，就不能发送信息
            {
                ti.setFocus();
                return;
            }
            var chat:Object = new Object();

            chat['id'] = UUIDUtil.create();
            chat['te'] = __msg;
            chat['co'] = cp.selectedColor;
            chat['we'] = bBTN.selected?'bold':'normal';
            chat['st'] = iBTN.selected?'italic':'normal';
            chat['de'] = uBTN.selected?'underline':'none';
            chat['si'] =ns.value ;
            chat['d'] = DateUtil.dateLblChat(new Date());

            if(members==null){
                ChatManager.sendMessageToPerson(chatUser.id,chat,function(data:Object):void{
                    al(data,chat);
                });
            }else{
                if(chatUser.channel){
                    ChatManager.sendMessageToChannel(chatUser.channel,chat,function(data:Object):void{
                        al(data,chat);
                    });
                }else{
                    ChatManager.sendMessageToDeparment(chatUser.id,type,chat,function(data:Object):void{
                        al(data,chat);
                    });
                }

            }

//            chat['status']="loading";
//            chatsArr.addItem(chat);
//            showLastMsg();



            ti.text = '';
            ti.setFocus();
        }

        private function al(data:Object,chat:Object):void{
            trace("chat:"+JParser.encode(data));

//                for each(var c:Object in chatsArr){
//                    if(c.id==chat.id){
//                        if(data.code==200){
//                            c.status="success";
//                        }else{
//                            c.status="failue";
//                        }
//                        chatsArr.refresh();
//                    }
//                }
//            showLastMsg();
//            Alert.show(JParser.encode(data),chat['text']);
        }

        private function pressEnter(event:KeyboardEvent):void{
            if(event.keyCode == 13)  {
                sendBTN_clickHandler();
            }
        }


        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<control:layout>
		<s:VerticalLayout gap="0" >
			
		</s:VerticalLayout>
	</control:layout>

    <s:HGroup id="horGroup" width="100%" height="100%">
        <s:VGroup   width="100%" height="100%">

            <uicontrol:AddressList id="chatList"  dataProvider="{chatsArr}"
                                   listItemClick="chatItemClick_handler(event)"
                                   itemRenderer="uicontrol.renderer.ChatItemRenderer" width="100%" height="100%">
            </uicontrol:AddressList>
            <s:BorderContainer width="100%" height="30" backgroundImage="{CBorderContainer.toolbgimg}" borderVisible="false">
                <s:layout>
                    <s:HorizontalLayout paddingLeft="10" gap="10" paddingRight="15" verticalAlign="middle"></s:HorizontalLayout>
                </s:layout>

                <mx:ColorPicker id="cp"/>
                <s:Label text="字号"/>
                <s:NumericStepper id="ns" minimum="12" value="14" maximum="20" stepSize="2"/>
                <mx:Button id="bBTN" width="25" toggle="true" icon="@Embed('/assets/img/b.png')"/>
                <mx:Button id="iBTN" width="25" toggle="true" icon="@Embed('/assets/img/i.png')"/>
                <mx:Button id="uBTN" width="25" toggle="true" icon="@Embed('/assets/img/u.png')"/>
                <mx:Spacer width="100%" height="10"/>
                <s:Button id="historyButton" label="加载历史记录" width="150" height="25" click="getHistoryChat()"  />
            </s:BorderContainer>
            <s:TextArea id="ti" width="100%" height="50"
                        paddingTop="10" paddingBottom="5" paddingLeft="5" paddingRight="5"
                        focusEnabled="true" fontLookup="device"
                        fontFamily="simsun,MINGLIU"
                        alignmentBaseline="ideographicCenter"
                        color="{cp.selectedColor}"
                        fontWeight="{bBTN.selected?'bold':'normal'}"
                        fontStyle="{iBTN.selected?'italic':'normal'}"
                        textDecoration="{uBTN.selected?'underline':'none'}"
                        fontSize="{ns.value}"
                        editable="true"
                        keyUp="pressEnter(event)"
                    />
            <s:HGroup width="100%" height="30" horizontalAlign="left" verticalAlign="middle">

                <s:Button id="sendBTN" label="发送(Enter键)" chromeColor="#ff0000" color="#ffffff" width="120" height="25" click="sendBTN_clickHandler(event)"/>
                <s:Button  label="清空" width="80" height="25" click="{ti.text='';}"  />
            </s:HGroup>

        </s:VGroup>
        <s:VGroup width="150" height="100%" horizontalAlign="left" gap="5" paddingTop="10">
            <s:HGroup verticalAlign="middle" paddingLeft="10" gap="5">
                <s:Button label="添加成员"></s:Button>
            </s:HGroup>
            <s:HGroup verticalAlign="middle" paddingLeft="10" gap="5">
                <s:Image id="head" width="45" height="45"></s:Image>
                <s:Label id="nameLabel"  ></s:Label>
            </s:HGroup>
            <uicontrol:AddressList  id="addressList" dataProvider="{members}"
                                   listItemClick="listItemClick_handler(event)"
                                   itemRenderer="uicontrol.renderer.AddressItemRenderer" width="100%" height="100%">
            </uicontrol:AddressList>
        </s:VGroup>

    </s:HGroup>


</control:CBorderContainer>
