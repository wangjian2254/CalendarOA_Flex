<?xml version="1.0" encoding="utf-8"?>
<window:EfficientTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" x="-1000" y="100"   title="{titlestr}" creationComplete="init()"
                             xmlns:uicontrol="uicontrol.*" xmlns:window="control.window.*">
    <fx:Script>
		<![CDATA[
        import events.ChangeMenuEvent;
        import events.ChangeUserEvent;
        import events.ChatTimelineEvent;
        import events.MembersEvent;

        import httpcontrol.HttpServiceUtil;

        import model.ChatChannel;
        import model.Schedule;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.CollectionEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        import org.idream.pomelo.Pomelo;

        import uicontrol.MemberItem;

        import util.DateUtil;
        import util.ScheduleUtil;
        import util.ToolUtil;

        [Bindable]
        public var titlestr:String = "创建任务";

        [Bindable]
        public var startDateValue:Date = new Date();
        [Bindable]
        public var endDateValue:Date = new Date();

        [Bindable]
        public var schedulData:Schedule = null;

        [Bindable]
        private var myproject:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var departmentMembers:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var timelist:ArrayCollection = new ArrayCollection([{"value": "0000", "text": "凌晨 00:00"}]);
        [Bindable]
        private var warninglist:ArrayCollection = new ArrayCollection([{"value": 1, "text": "分钟"}, {
            "value": 60,
            "text": "小时"
        }, {"value": 60 * 24, "text": "天"}, {"value": 60 * 24 * 7, "text": "周"}]);
        //			[Bindable]
        //			private var warninglist2:ArrayCollection = new ArrayCollection([{"value":0,"text":"当天"},{"value":24*60,"text":"提前一天"},{"value":24*60*2,"text":"提前二天"},{"value":24*60*3,"text":"提前三天"},{"value":24*60*4,"text":"提前四天"},{"value":24*60*7,"text":"提前一星期"}]);
        [Bindable]
        private var endtimelist:ArrayCollection = new ArrayCollection();


        [Bindable]
        private var departmentList:ArrayCollection = new ArrayCollection();


        public var inited:Boolean=false;
        private var selectColor:Number = 0x00CCFF;

        public var default_checker:int = -1;
        public var default_department:int = -1;
        public var default_users:int = -1;
        public var default_content:String;
        public var default_project:int = -1;


        override public function releaseListener(e:CloseEvent):void {
            ToolUtil.projectList.removeEventListener(CollectionEvent.COLLECTION_CHANGE, refreshMyProject);


        }

        private function closeSchedule(e:CloseEvent):void {
            if (schedulData != null) {
                ScheduleUtil.closeSchedulePanel(schedulData.id);
            } else {
                ScheduleUtil.clearNewSchedule(this);
            }
        }

        private function refreshMyProject(e:CollectionEvent):void {
            changeProjectByDepart();
        }

        public function init():void {
            addEventListener(CloseEvent.CLOSE, closeSchedule);
//            removeEventListener(ChatTimelineEvent.Channel, flagTimeline);
            ToolUtil.projectList.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshMyProject);
            usersGroup.addEventListener(MembersEvent.REMOVE_MEMBERS, removeUsersHandler);

            btnSave.visible = true;
            btnStart.visible = false;
            btnCheck.visible = false;
            btnDel.visible = true;
            btnRestart.visible = false;
            btnFinish.visible = false;
            if (schedulData == null) {
//                if(chatControl!=null&&windowGroup.getElementIndex(chatControl)>=0){
//                    windowGroup.removeElement(chatControl);
//                }
                btnDel.visible = false;
                scheduleTitle.setFocus();
            } else {

//                this.width = chatControl.width+schedulePanel.width;
                if (schedulData.cv == schedulData.v && schedulData.v != 0) {
                    initChatControl();
                } else {
                    initTaskChat();
                }


                btnDel.visible = !schedulData.used;
                changeBorderColor();
            }


            //审核者 有资格修改任务
            dopanel.visible = (schedulData == null || schedulData.isDelPower(ToolUtil.sessionUser.pid) || schedulData.isUser(ToolUtil.sessionUser.pid)) ? true : false;

            if (schedulData != null) {

                is_all_day.selected = !schedulData.is_all_day;
                if (!is_all_day.selected) {

                    startDateValue = DateField.stringToDate(schedulData.startdate, "YYYYMMDD");
                    endDateValue = DateField.stringToDate(schedulData.startdate, "YYYYMMDD");
                } else {
                    startDateValue = DateUtil.parseDate(schedulData.startdate + schedulData.time_start);
                    endDateValue = DateUtil.parseDate(schedulData.startdate + schedulData.time_end);

                }
                startDate.selectedDate = startDateValue;
                endDate.selectedDate = DateField.stringToDate(schedulData.enddate, "YYYYMMDD")

                scheduleTitle.text = schedulData.title;
                repeatType.selectedValue = schedulData.repeat_type;

                colorClick(schedulData.color);
                for each(var projectitem:Object in ToolUtil.allProjectList) {
                    if (schedulData.project == projectitem.id) {
                        schedulData.department = projectitem.department;
                        ;
                        break;
                    }
                }
                for each(var department:Object in ToolUtil.myDepartmentList) {
                    if (schedulData.department == department.id) {
                        departmentDownList.selectedItem = department;
                        break;
                    }
                }
                changeProjectByDepart();
                for each(var project:Object in myproject) {
                    if (schedulData.project == project.id) {
                        projectDownList.selectedItem = project;
                        break;
                    }
                }


                usersGroup.removeAllElements();
                for each(var pid:int in schedulData.users) {
                    var m:MemberItem = new MemberItem();
                    m.person = ToolUtil.getAnyPersonById(pid);
                    m.showBtn = dopanel.visible;
                    if (m.person.hasOwnProperty("id")) {
                        usersGroup.addElement(m);
                    }
                }
                need_check.selected = !schedulData['need_check'];
                if (!need_check.selected) {
                    for each(var checkerperson:Object in departmentMembers) {
                        if (schedulData.checker == checkerperson.id) {
                            checkerDownList.selectedItem = checkerperson;
                            break;
                        }
                    }
                }
                levleStepper.value = schedulData.level;
                urgentDownList.selectedIndex = schedulData.urgent - 1;
//                statusDownList.selectedIndex = schedulData.status-1;
                boxTiXing.selected = !schedulData.notify;
                if (schedulData.notifyArr != null && schedulData.notifyArr.length > 0) {
                    alertBox0.selected = false;
                    alertBox1.selected = false;
                    alertBox2.selected = false;
                    alertBox3.selected = false;
                    alertBox4.selected = false;
                    alertBox5.selected = false;
                    alertBox6.selected = false;
                    alertBox7.selected = false;
                    alertBox8.selected = false;
                    alertBox9.selected = false;
                    alertBox10.selected = false;
                    alertBox11.selected = false;
                    for each(var tmin:int in schedulData.notifyArr) {
                        switch (ToolUtil.notifytime.indexOf(tmin)) {
                            case 0:
                                alertBox0.selected = true;
                                break;
                            case 1:
                                alertBox1.selected = true;
                                break;
                            case 2:
                                alertBox2.selected = true;
                                break;
                            case 3:
                                alertBox3.selected = true;
                                break;
                            case 4:
                                alertBox4.selected = true;
                                break;
                            case 5:
                                alertBox5.selected = true;
                                break;
                            case 6:
                                alertBox6.selected = true;
                                break;
                            case 7:
                                alertBox7.selected = true;
                                break;
                            case 8:
                                alertBox8.selected = true;
                                break;
                            case 9:
                                alertBox9.selected = true;
                                break;
                            case 10:
                                alertBox10.selected = true;
                                break;
                            case 11:
                                alertBox11.selected = true;
                                break;
                        }
                    }
                }
                if (schedulData.repeat_type != 'none') {
                    titlestr = schedulData.title + "--" + schedulData.date.substr(0, 4) + "/" + schedulData.date.substr(4, 6) + "/" + schedulData.date.substr(6, 8) + " --(" + ToolUtil.getTaskUrgent(schedulData.urgent) + ")" + " --[" + ToolUtil.getTaskStatus(schedulData.status) + "]";
                } else {
                    titlestr = schedulData.title + " --(" + ToolUtil.getTaskUrgent(schedulData.urgent) + ")" + " --[" + ToolUtil.getTaskStatus(schedulData.status) + "]";
                }

                if (schedulData.status == 1 && schedulData.isUser(ToolUtil.sessionUser.pid)) {
                    btnStart.visible = true;
                }
                if (schedulData.status == 2 && schedulData.isUser(ToolUtil.sessionUser.pid)) {
                    btnFinish.visible = true;
                }
                if (schedulData.status == 3 && schedulData.isCheck(ToolUtil.sessionUser.pid)) {
                    btnCheck.visible = true;
                    btnRestart.visible = true;
                }
                if (schedulData.status == 4 && (schedulData.isUser(ToolUtil.sessionUser.pid) || schedulData.isCheck(ToolUtil.sessionUser.pid))) {
                    btnRestart.visible = true;
                }
                if (schedulData.status == 4) {
                    btnSave.visible = false;
                }


            } else {
                m = new MemberItem();
                m.person = ToolUtil.getAnyPersonById(ToolUtil.sessionUser.pid);
                m.showBtn = dopanel.visible;
                if (m.person.hasOwnProperty("id")) {
                    usersGroup.addElement(m);
                }
            }



            makeTimeLineData();
            repeatChange();
            changeTiXing();


            if (schedulData == null) {
                changeProjectByDepart();

                if (default_users > -1) {
                    usersGroup.removeAllElements();
                    var m:MemberItem = new MemberItem();
                    m.person = ToolUtil.getActivePersonById(default_users);
                    m.showBtn = true;
                    if (m.person != null) {

                        usersGroup.addElement(m);
                    }

                }
                if (default_department > -1) {
                    for each(var d:Object in departmentDownList.dataProvider) {
                        if (d.id == default_department) {
                            departmentDownList.selectedItem = d;
                            changeProjectByDepart();
                            break;
                        }
                    }
                }
                if (default_project > -1) {
                    for each(var p:Object in projectDownList.dataProvider) {
                        if (p.id == default_project) {
                            projectDownList.selectedItem = p;
                            break;
                        }
                    }
                }
                if (default_checker > -1) {
                    for each(var p:Object in checkerDownList.dataProvider) {
                        if (p.id == default_checker) {
                            checkerDownList.selectedItem = p;
                            need_check.selected = false;
                            break;
                        }
                    }
                }
                if (default_content != null) {
                    scheduleTitle.text = default_content;
                }
            }


            need_saved();
            this.invalidateDisplayList();

            inited=true;
        }

        private function makeTimeLineData():void{
            timelist.removeAll();
            for (var i:Number = 0; i < 24; i++) {
                var h:String = "0" + i;
                var s:String = "凌晨 ";
                if (i >= 5 && i < 9) {
                    s = "上午 ";
                }
                if (i >= 9 && i < 15) {
                    s = "中午 ";
                }
                if (i >= 15 && i < 18) {
                    s = "下午 ";
                }
                if (i >= 18) {
                    s = "晚上 ";
                }

                timelist.addItem({
                    "value": h.substring(h.length - 2) + "00",
                    "text": s + h.substring(h.length - 2) + ":00"
                });
                timelist.addItem({
                    "value": h.substring(h.length - 2) + "30",
                    "text": s + h.substring(h.length - 2) + ":30"
                });
            }

            try {
                var index:Number = startDateValue.hours * 2;
                if (startDateValue.minutes >= 30) {
                    index += 1;
                }
                startTime.selectedItem = timelist.getItemAt(index);
                endtimelist.removeAll();
                for (index += 1; index < timelist.length; index++) {
                    endtimelist.addItem(timelist.getItemAt(index));
                    if (timeStr.format(endDateValue) >= timelist.getItemAt(index).value) {
                        endTime.selectedItem = timelist.getItemAt(index);
                    }
                }
                endtimelist.addItem({"value": "2359", "text": "24:00"});
                if (endtimelist.length == 1) {
                    endTime.selectedIndex = 0;
                }
            } catch (error:Error) {

            }
        }

        private function changeBorderColor():void {
            switch (schedulData.status) {
                case 1:
                    setStyle("borderColor", 0xcccccc);
                    break;
                case 2:
                    setStyle("borderColor", 0x02711D);
                    break;
                case 3:
                    setStyle("borderColor", 0xdf9110);
                    break;
                case 4:
                    setStyle("borderColor", 0x000000);
                    break;
            }
            if (schedulData.isOutOfDate()) {
                setStyle("borderColor", 0xff0000);
            }
        }

        private function getData():Object {
            var obj:Object = new Object();
            if (schedulData != null && schedulData.id) {
                obj.id = schedulData.id;
            }
            obj.title = scheduleTitle.text;
            //子任务
            obj.startdate = datestr.format(startDate.selectedDate);

            obj.enddate = datestr.format(endDate.selectedDate);

            obj.is_all_day = !is_all_day.selected;
            if (is_all_day.selected) {
                obj.time_start = startTime.selectedItem.value;
                obj.time_end = endTime.selectedItem.value;
            }
            obj.repeat_type = repeatType.selectedValue.toString();

            obj.repeat_date = new Array();
            if (repeatType.selectedValue == "weekly") {
                for (var m:Number = 0; m < dayTile.numElements; m++) {
                    if ((dayTile.getElementAt(m) as CheckBox).selected) {
                        if (m == 0) {
                            obj.repeat_date.push(6);
                        }
                        obj.repeat_date.push(m - 1);
                    }
                }
            }
            if (repeatType.selectedValue == "monthly") {
                for (m = 0; m < dayTile.numElements; m++) {
                    if ((dayTile.getElementAt(m) as CheckBox).selected) {
                        obj.repeat_date.push(m + 1);
                    }
                }
            }
            obj.color = selectColor;
            obj.department = departmentDownList.selectedItem.id;
            obj.project = projectDownList.selectedItem.id;
            obj.users = new Array();
            var p:MemberItem = null;
            for (var i:int = 0; i < usersGroup.numElements; i++) {
                p = usersGroup.getElementAt(i) as MemberItem;
                obj.users.push(p.person.id);
            }
            obj.need_check = !need_check.selected;
            if (!need_check.selected) {
                obj.checker = checkerDownList.selectedItem.id;
            } else {
                obj.checker = null;
            }
            if (is_all_day.selected) {
                obj.notify = !boxTiXing.selected;
                if (!boxTiXing.selected) {
                    obj.notifyArr = new Array();
                    if (alertBox0.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[0]);
                    }
                    if (alertBox1.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[1]);
                    }
                    if (alertBox2.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[2]);
                    }
                    if (alertBox3.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[3]);
                    }
                    if (alertBox4.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[4]);
                    }
                    if (alertBox5.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[5]);
                    }
                    if (alertBox6.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[6]);
                    }
                    if (alertBox7.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[7]);
                    }
                    if (alertBox8.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[8]);
                    }
                    if (alertBox9.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[9]);
                    }
                    if (alertBox10.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[10]);
                    }
                    if (alertBox11.selected) {
                        obj.notifyArr.push(ToolUtil.notifytime[11]);
                    }

                }
            }

            obj.level = levleStepper.value;
            obj.urgent = urgentDownList.selectedItem.id;


            return obj;
        }

        public function save():void {
            if (this.scheduleTitle.text == "") {
                scheduleTitle.selectAll();
                Alert.show("请填写任务标题。", "提示");
                return;
            }
            if (startDate.selectedDate == null) {
                Alert.show("请选择开始时间。", "提示");
                startDate.open();
                return;
            }
            if (endDate.selectedDate == null) {
                Alert.show("请选择结束时间。", "提示");
                endDate.open();
                return;
            }
            if (endDate.selectedDate.getTime() < startDate.selectedDate.getTime()) {
                Alert.show("结束时间不能早于开始时间。", "提示");
                endDate.open();
                return;
            }
            if (repeatType.selectedValue != 'none' && (endDate.selectedDate.getTime() - startDate.selectedDate.getTime()) / (1000 * 24 * 60 * 60) > 366) {
                Alert.show("循环任务，时间跨度不能超过1年。", "提示");
                endDate.open();
                return;
            }
            if (usersGroup.numElements == 0) {
                Alert.show("请选择责任人。", "提示");
                openUserChoice();
                return;
            }
            var obj:Object = getData();
            if (schedulData != null && schedulData.repeat_type != 'none') {
                var msg:String;
                if (schedulData.repeatEqual(repeatType.selectedValue.toString(), obj.repeat_date)) {
                    msg = "是否将信息修改，应用到后续任务？\n\n    是：对后续所有任务产生修改。\n\n    否：仅对当前任务产生修改。";
                } else {
                    msg = "是否将信息修改，应用到后续任务？\n\n    是：对后续所有任务产生修改。\n        (注：循环规则发生变化，后续任务将会调整，其中已执行的任务不会被删除。)\n\n    否：仅对当前任务产生修改。";
                }
                Alert.show(msg, "提示", Alert.YES | Alert.NO | Alert.CANCEL, null, function (e:CloseEvent):void {
                    if (e.detail == Alert.YES) {
                        obj['single'] = false;
                    } else {
                        obj['single'] = true;
                    }
                    HttpServiceUtil.getCHTTPServiceAndResult("/ca/updateSchedule", saveResult, "POST").send(obj);
                });
            } else {
                HttpServiceUtil.getCHTTPServiceAndResult("/ca/updateSchedule", saveResult, "POST").send(obj);
            }

        }


        private function saveResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                ScheduleUtil.clearNewSchedule(this);

                schedulData = new Schedule(result.result);
                ScheduleUtil.rememberSchedulePanel(schedulData.id, this);
                FlexGlobals.topLevelApplication.dispatchEvent(new ChangeUserEvent(ChangeUserEvent.ChangeUser_EventStr, ToolUtil.sessionUser, true));
            }
        }

        private function changeSchedule(status:int):void {
            var obj:Object = new Object();
            if (schedulData != null && schedulData.id) {
                obj.id = schedulData.id;
            }
            obj.status = status;
            HttpServiceUtil.getCHTTPServiceAndResult("/ca/changeScheduleStatus", updateScheduleHandler, "POST").send(obj);
        }

        private function updateScheduleHandler(result:Object, e:ResultEvent):void {
            if (result.success) {
                schedulData = new Schedule(result.result);
                ToolUtil.updateSchedul(schedulData.id, schedulData);
            }
        }

        public function refresh():void {
            var start:Number = timelist.getItemIndex(startTime.selectedItem);
            endtimelist.removeAll();
            for (var i:Number = start + 1; i < timelist.length; i++) {
                endtimelist.addItem(timelist.getItemAt(i));
                if (timeStr.format(endDateValue) >= timelist.getItemAt(i).value) {
                    endTime.selectedItem = timelist.getItemAt(i);
                }
            }
        }

        private function changeTiXing():void {
            if (!is_all_day.selected || boxTiXing.selected) {
                itemTixing.visible = false;
                itemTixing.height = 0;
            } else {
                itemTixing.visible = true;
                itemTixing.height = 75;
            }
        }

        private function repeatChange():void {
            if (repeatType.selectedValue == "none" || repeatType.selectedValue == "daily" || repeatType.selectedValue == "yearly") {
                dayTile.visible = false;
                dayPanel.visible = false;
                dayPanel.height = 0;
            } else {
                dayTile.visible = true;
                if (repeatType.selectedValue == "weekly") {
                    dayPanel.visible = true;
                    dayPanel.height = 25;
                    dayTile.removeAllElements();
                    for (var i:Number = 0; i < 7; i++) {
                        var cb:CheckBox = new CheckBox();
                        cb.addEventListener(Event.CHANGE, need_saved);
                        switch (i) {
                            case 0:
                                cb.label = "日";
                                break;
                            case 1:
                                cb.label = "一";
                                break;
                            case 2:
                                cb.label = "二";
                                break;
                            case 3:
                                cb.label = "三";
                                break;
                            case 4:
                                cb.label = "四";
                                break;
                            case 5:
                                cb.label = "五";
                                break;
                            case 6:
                                cb.label = "六";
                                break;
                        }

                        cb.selected = false;
                        cb.height = 25;
                        dayTile.addElement(cb);
                    }
                    for (var index:Number = 0; schedulData != null ? (schedulData.hasOwnProperty("repeat_date") ? index < schedulData.repeat_date.length : false) : false; index++) {
                        try {
                            if (schedulData.repeat_date[index] == 6) {

                                (dayTile.getElementAt(0) as CheckBox).selected = true;
                            } else {
                                (dayTile.getElementAt(Number(schedulData.repeat_date[index]) + 1) as CheckBox).selected = true;
                            }
                        } catch (e:Error) {
                        }
                    }

                }

                if (repeatType.selectedValue == "monthly") {
                    dayTile.removeAllElements();
                    dayPanel.visible = true;
                    dayPanel.height = 130;
                    for (i = 0; i < 31; i++) {
                        cb = new CheckBox();
                        cb.addEventListener(Event.CHANGE, need_saved);
                        cb.label = "" + (i + 1);
                        cb.height = 25;
                        cb.selected = false;
                        dayTile.addElement(cb);
                    }
                    for (index = 0; schedulData != null ? (schedulData.hasOwnProperty("repeat_date") ? index < schedulData.repeat_date.length : false) : false; index++) {
                        try {
                            (dayTile.getElementAt(Number(schedulData.repeat_date[index]) - 1) as CheckBox).selected = true;
                        } catch (e:Error) {
                        }
                    }
                }
            }
            this.invalidateDisplayList();
        }

        private function colorChange():void {
            colorClick(colorPicker.selectedColor);
        }

        private function colorClick(c:Number):void {
            selectColor = c;
            color0.setStyle("backgroundColor", c);
            color1.setStyle("borderColor", 0xffffff);
            color2.setStyle("borderColor", 0xffffff);
            color3.setStyle("borderColor", 0xffffff);
            color4.setStyle("borderColor", 0xffffff);
            color5.setStyle("borderColor", 0xffffff);
            color6.setStyle("borderColor", 0xffffff);
            color7.setStyle("borderColor", 0xffffff);
            color8.setStyle("borderColor", 0xffffff);
            color9.setStyle("borderColor", 0xffffff);
            color10.setStyle("borderColor", 0xffffff);
            switch (c) {
                case 0xaecfea:
                    color1.setStyle("borderColor", 0x000000);
                    break;
                case 0x5484ed:
                    color2.setStyle("borderColor", 0x000000);
                    break;
                case 0xa4bdfc:
                    color3.setStyle("borderColor", 0x000000);
                    break;
                case 0x46d6db:
                    color4.setStyle("borderColor", 0x000000);
                    break;
                case 0x7ae7bf:
                    color5.setStyle("borderColor", 0x000000);
                    break;
                case 0x51b749:
                    color6.setStyle("borderColor", 0x000000);
                    break;
                case 0xfbd75b:
                    color7.setStyle("borderColor", 0x000000);
                    break;
                case 0xffb878:
                    color8.setStyle("borderColor", 0x000000);
                    break;
                case 0xff887c:
                    color9.setStyle("borderColor", 0x000000);
                    break;
                case 0xdbadff:
                    color10.setStyle("borderColor", 0x000000);
                    break;
                default:
                    if (colorPicker.selectedColor != c) {
                        colorPicker.selectedColor = c;
                    }

            }
        }


        private function delAsk():void {
            if (schedulData != null && schedulData.id) {
                if (schedulData.repeat_type == 'none') {
                    Alert.show("是否删除当前任务?", "提示", Alert.YES | Alert.CANCEL, null, function (e:CloseEvent):void {
                        if (e.detail == Alert.YES) {
                            var data:Object = new Object();
                            data["id"] = schedulData.id;
                            HttpServiceUtil.getCHTTPServiceAndResult("/ca/delSchedule", delResult, "POST").send(data);
                        }
                    });
                } else {
                    Alert.show("后续任务是否一并删除？\n\n    是：删除后续任务。\n        (注：后续任务中已执行的任务不会被删除。)\n\n    否：仅删除当前任务。 ", "提示", Alert.YES | Alert.NO | Alert.CANCEL, null, function (e:CloseEvent):void {
                        var data:Object = new Object();
                        data["id"] = schedulData.id;
                        if (e.detail == Alert.YES) {
                            data["single"] = false;
                        }
                        if (e.detail == Alert.NO) {
                            data["single"] = true;
                        }
                        if (e.detail == Alert.YES || e.detail == Alert.NO) {
                            HttpServiceUtil.getCHTTPServiceAndResult("/ca/delSchedule", function delResult(result:Object, event:ResultEvent):void {
                                if (result.success) {
                                    if (e.detail == Alert.YES) {
                                        FlexGlobals.topLevelApplication.dispatchEvent(new ChangeUserEvent(ChangeUserEvent.ChangeUser_EventStr, ToolUtil.sessionUser, true));
                                    } else {
                                        ToolUtil.updateSchedul(schedulData.id, null);
                                    }
                                    closeWin();
                                }
                            }, "POST").send(data);
                        }

                    });
                }

            } else {
                closeWin();
            }

        }

        private function delResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                ToolUtil.updateSchedul(schedulData.id, null);
                closeWin();
            }
        }


        private function openAddress():void {
            var obj:Object = new Object();
            var evt:ChangeMenuEvent = new ChangeMenuEvent(ChangeMenuEvent.ChangeMenu_EventStr, "contact", obj, true)
            FlexGlobals.topLevelApplication.dispatchEvent(evt);
        }


        private function changeProjectByDepart():void {
            myproject.removeAll();

            for each(var item:Object in ToolUtil.projectList) {
                if ((item.department == departmentDownList.selectedItem.id) || (item.department == null && departmentDownList.selectedItem.id == 0)) {
                    myproject.addItem(item);
                }
            }
            myproject.addItem({id: 0, name: "无项目"});
            projectDownList.selectedIndex = 0;
            changeProject();


            //todo:审核人 范围验证
            var checker:Object = checkerDownList.selectedItem;
            departmentMembers.removeAll();
            if (departmentDownList.selectedItem.hasOwnProperty("children")) {
                departmentMembers.addAll(departmentDownList.selectedItem.children);
            } else {
                departmentMembers.addAll(ObjectUtil.copy(ToolUtil.memberList) as ArrayCollection);
            }

            if (checker != null) {
                var index:int = departmentMembers.getItemIndex(checker);
                if (index >= 0) {
                    checkerDownList.selectedIndex = index;
                } else {
                    checkerDownList.selectedIndex = -1;
                }
            }
            if (checkerDownList.selectedIndex == -1) {
                for each(var item:Object in departmentMembers) {
                    if (item.id == ToolUtil.sessionUser.pid) {
                        checkerDownList.selectedItem = item;
                        break;
                    }
                }
            }

            // todo:责任人范围，修改。只能在部门内之间选择
            var p:MemberItem = null;
            var f:Boolean = false;
            for (var i:int = usersGroup.numElements - 1; i >= 0; i--) {
                p = usersGroup.getElementAt(i) as MemberItem;
                f = false;
                for each(var person:Object in departmentMembers) {
                    if (person.id == p.person.id) {
                        f = true;
                    }
                }
                if (!f) {
                    usersGroup.removeElement(p);
                }
            }
        }

        private function changeProject():void{
            if(projectDownList.selectedItem && projectDownList.selectedItem.id==0){
                colorFormItem.visible = true;
            }else{
                colorFormItem.visible = false;
            }

        }

        private function openUserChoice():void {
            var gp:TaskMemberPanel = PopUpManager.createPopUp(this, TaskMemberPanel, true) as TaskMemberPanel;
            gp.allmember = departmentMembers;
            var m:ArrayCollection = new ArrayCollection();
            var p:MemberItem = null;
            for (var i:int = 0; i < usersGroup.numElements; i++) {
                p = usersGroup.getElementAt(i) as MemberItem;
                m.addItem(p.person);
            }
            gp.usermember = m;
            gp.addEventListener(MembersEvent.MEMBERS, function (e:MembersEvent):void {
                var members:ArrayCollection = e.data as ArrayCollection;
                usersGroup.removeAllElements();

                for each(var person:Object in members) {
                    p = new MemberItem();
                    p.person = person;
                    p.showBtn = true;
                    usersGroup.addElement(p);
//                    usersGroup.validateNow();
                }
                need_saved();
            });

        }

        private function removeUsersHandler(e:MembersEvent):void {
            var person:Object = e.data;
            var p:MemberItem = null;
            var f:Boolean = false;
            for (var i:int = usersGroup.numElements - 1; i >= 0; i--) {
                p = usersGroup.getElementAt(i) as MemberItem;
                f = false;
                if (person.id == p.person.id) {
                    f = true;
                }
                if (f) {
                    usersGroup.removeElement(p);
                }
            }
            need_saved();
        }

        private function addProject():void {
            PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, CreateProjectPanel, true) as CreateProjectPanel;
        }

        private function setEndDate(n:int):void {
            var d:Date = ObjectUtil.clone(startDate.selectedDate) as Date;
            d.date += n;
            endDate.selectedDate = d;
        }

        //创建 任务讨论组
        private function initTaskChat():void {
            // 修改 pomelo 服务器的 createChannel 方法。如果存在，则变成修改。以适应任务讨论模块的情况。
            var org:Object = new Object();

            org.channel = "t" + schedulData.id;
            org.name = "[任务]" + schedulData.title.substr(0, 10) + (schedulData.title.length > 10 ? "……" : "");
            org.users = new Array();
            for (var i:int = 0; i < schedulData.users.length; i++) {
                org.users.push(int(schedulData.users[i]));
            }
            org.author = schedulData.author;
            org.v = schedulData.v;

            Pomelo.getIns().request("connector.entryHandler.createChannel", org, function (data:Object):void {
                if (data.code == 200) {
                    if (data.needupdate) {
                        var obj:Object = new Object();
                        obj['id'] = schedulData.id;
                        HttpServiceUtil.getCHTTPServiceAndResult("/ca/getScheduleById", updateScheduleHandler, "POST").send(obj);
                    } else {
                        var obj:Object = new Object();
                        obj['id'] = schedulData.id;
                        obj['cv'] = schedulData.v;
                        HttpServiceUtil.getCHTTPServiceAndResult("/ca/changeScheduleChannelVersion", updateScheduleHandler, "POST").send(obj);
                    }
                } else {
                    chatControl.enabled = false;
                    chatControl.toolTip = "无法连接到通信服务器，请重新启动程序。";
                }
            });
        }

        private function initChatControl():void {
            if (chatControl.chatUser != null && schedulData.id == chatControl.chatUser.id && schedulData.v == chatControl.chatUser.v) {
                return;
            }
            var chatUser:ChatChannel = new ChatChannel();
            chatUser.id = schedulData.id;
            chatUser.channel = "t" + schedulData.id;
            chatUser.name = "[任务]" + schedulData.title.substr(0, 10) + (schedulData.title.length > 10 ? "……" : "");
            ;
            chatUser.author = schedulData.author;
            chatUser.icon = "/static/smalloaicon/group.png";
            chatUser.setMembers(schedulData.users);
            chatUser.v = schedulData.v;

            chatControl.chatUser = chatUser;
            chatControl.visible = true;
            chatControl.width = 500;
            chatControl.init(null);
        }

//        private function flagTimeline(e:ChatTimelineEvent):void {
//            for each(var c:ChatChannel in ToolUtil.groupList) {
//                if (c.channel == e.channel) {
//                    c.unread = 0;
//                    Pomelo.getIns().notify("connector.entryHandler.updatetimeline", {
//                        channel: e.channel,
//                        pid: ToolUtil.sessionUser.pid
//                    });
//                }
//            }
//            ToolUtil.groupList.refresh();
//        }

        public function delSchedule():void{
            Alert.show("任务已经被删除,是否关闭窗口？","提示",Alert.YES | Alert.CANCEL,this,function(e:CloseEvent){
                if(e.detail==Alert.YES){
                    closeWin();
                }
            });
        }

        private function need_saved(e:Event=null):void{
            if(check_schedule_changed(schedulData)){
                btnSave.label="保存";
                btnSave.setStyle("color",0xffffff);
                btnSave.enabled=true;
            }else{
                btnSave.label="没有变动";
                btnSave.setStyle("color",0x000000);
                btnSave.enabled=false;
            }
        }

        private function check_schedule_changed(data:Schedule):Boolean{
            if(data==null){
                return true;
            }
            var cdata:Object=getData();
            var flag:Boolean = false;
            if(data.title!=cdata.title){
                flag=true;
            }
            if(data.department!=cdata.department){
                flag=true;
            }
            if(data.project!=cdata.project){
                flag=true;
            }
            if(data.startdate!=cdata.startdate){
                flag=true;
            }
            if(data.enddate!=cdata.enddate){
                flag=true;
            }
            if(data.is_all_day!=cdata.is_all_day){
                flag=true;
            }
            if(data.time_start!=cdata.time_start){
                flag=true;
            }
            if(data.time_end!=cdata.time_end){
                flag=true;
            }
            if(data.repeat_type!=cdata.repeat_type){
                flag=true;
            }
            if(data.repeat_type==cdata.repeat_type&&!data.check_repeat_data(cdata.repeat_date)){
                flag=true;
            }
            if(data.color!=cdata.color){
                flag=true;
            }
            if(!data.check_users(cdata.users)){
                flag=true;
            }
            if(data.need_check!=cdata.need_check){
                flag=true;
            }
            if(data.need_check==cdata.need_check&&data.need_check==true&&data.checker!=cdata.checker){
                flag=true;
            }
            if(data.notify!=cdata.notify){
                flag=true;
            }
            if(data.notify==cdata.notify&&!data.check_notifyArr(cdata.notifyArr)){
                flag=true;
            }
            if(data.level!=cdata.level){
                flag=true;
            }
            if(data.urgent!=cdata.urgent){
                flag=true;
            }
//            if(data.status!=cdata.status){
//                flag=true;
//            }
            return flag;
        }

        public function scheduleUpdated(data:Schedule):void{
            var flag:Boolean = check_schedule_changed(data);
            if(flag){
                Alert.show("任务已经被修改,是否刷新数据？","提示",Alert.YES | Alert.CANCEL,this,function(e:CloseEvent){
                    if(e.detail==Alert.YES){
                        schedulData=data;
                        init();
                    }
                });
            }else{
                schedulData=data;
                init();
            }

        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <s:RadioButtonGroup id="repeatType" change="repeatChange();need_saved();"/>
        <mx:DateFormatter id="datestr" formatString="YYYYMMDD" >

        </mx:DateFormatter>
        <mx:DateFormatter id="timeStr" formatString="JJNN" >

        </mx:DateFormatter>
    </fx:Declarations>
    <s:HGroup id="windowGroup" width="100%" height="100%" >
        <s:Form width="510" id="schedulePanel" >
            <s:layout>
                <s:FormLayout gap="0"  ></s:FormLayout>
            </s:layout>
            <s:FormItem label="项目：" height="25">
                <s:layout>
                    <s:HorizontalLayout gap="10">
                    </s:HorizontalLayout>
                </s:layout>
                <s:DropDownList id="departmentDownList" width="50%" labelField="label" selectedIndex="0" dataProvider="{ToolUtil.myDepartmentList}" change="changeProjectByDepart();need_saved();" ></s:DropDownList>
                <s:DropDownList id="projectDownList" width="50%" labelField="name" dataProvider="{myproject}" change="changeProject();need_saved();"></s:DropDownList>
                <s:Spacer width="30"></s:Spacer>
                <uicontrol:Btn width="16" height="16" styleName="btnAdd" clickFun="{addProject}" />
            </s:FormItem>
            <s:FormItem label="任务描述：" height="150">
                <s:layout>
                    <s:HorizontalLayout gap="5" verticalAlign="middle" />
                </s:layout>
                <s:TextArea id="scheduleTitle" width="100%" height="135" toolTip="任务内容：描述任务的具体工作" prompt="请写明任务内容、发生地点" change="need_saved();">
                </s:TextArea>
                <s:Label text="*" color="red"/>
            </s:FormItem>
            <s:FormItem label="时间段："  height="25">
                <s:layout>
                    <s:HorizontalLayout gap="5">
                    </s:HorizontalLayout>
                </s:layout>
                <mx:DateField id="startDate" width="100" selectedDate="{startDateValue}" formatString="YYYY-MM-DD" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" change="need_saved();"/>
                <s:CheckBox label="设置具体时刻" id="is_all_day" selected="true" change="changeTiXing();need_saved();">
                </s:CheckBox>
                <mx:ComboBox id="startTime" visible="{is_all_day.selected}" dataProvider="{timelist}" labelField="text" width="90"  change="refresh();need_saved();"  >

                </mx:ComboBox>
                <s:Label text="到" height="100%" verticalAlign="middle" visible="{is_all_day.selected}" />
                <mx:ComboBox id="endTime"  visible="{is_all_day.selected}"  dataProvider="{endtimelist}" labelField="text" width="90" change="need_saved();"  >

                </mx:ComboBox>
            </s:FormItem>
            <s:FormItem label="结束时间：" height="25">
                <s:layout>
                    <s:HorizontalLayout gap="5">

                    </s:HorizontalLayout>
                </s:layout>
                <mx:DateField id="endDate" width="100" selectedDate="{endDateValue}" formatString="YYYY-MM-DD" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" change="need_saved();" />
                <mx:LinkButton label="当天" click="setEndDate(0)" color="0x9f9f9f" textDecoration="underline" />
                <mx:LinkButton label="两天" click="setEndDate(1)"  color="0x9f9f9f" textDecoration="underline" />
                <mx:LinkButton label="三天" click="setEndDate(2)" color="0x9f9f9f" textDecoration="underline" />
                <mx:LinkButton label="四天" click="setEndDate(3)" color="0x9f9f9f" textDecoration="underline" />
                <mx:LinkButton label="一星期" click="setEndDate(6)" color="0x9f9f9f" textDecoration="underline" />
            </s:FormItem>
            <s:FormItem label="重复" height="25" toolTip="重复：周期性任务，的循环条件">
                <s:layout>
                    <s:HorizontalLayout gap="5">

                    </s:HorizontalLayout>
                </s:layout>
                <s:RadioButton group="{repeatType}" label="不重复" value="none" selected="true">
                </s:RadioButton>
                <s:RadioButton group="{repeatType}" label="每天" value="daily" >
                </s:RadioButton>
                <s:RadioButton group="{repeatType}" label="每周" value="weekly">
                </s:RadioButton>
                <s:RadioButton group="{repeatType}" label="每月" value="monthly">
                </s:RadioButton>
            </s:FormItem>
            <s:FormItem id="dayPanel"  label="重复时间：" includeInLayout="{dayPanel.visible}" height="25" toolTip="重复时间：在任务周期中，按条件循环任务">
                <s:TileGroup id="dayTile" width="100%" height="100%" requestedColumnCount="7" horizontalGap="10" verticalGap="0"   >
                    <s:CheckBox label="一" change="need_saved();" />
                    <s:CheckBox label="二" change="need_saved();" />
                    <s:CheckBox label="三" change="need_saved();" />
                    <s:CheckBox label="四" change="need_saved();" />
                    <s:CheckBox label="五" change="need_saved();" />
                    <s:CheckBox label="六" change="need_saved();" />
                    <s:CheckBox label="日" change="need_saved();" />
                </s:TileGroup>
            </s:FormItem>


            <s:FormItem id="colorFormItem" visible="false" includeInLayout="{colorFormItem.visible}" label="颜色：" height="33" toolTip="区分任务">
                <s:layout>
                    <s:HorizontalLayout gap="3">

                    </s:HorizontalLayout>
                </s:layout>
                <s:BorderContainer id="color0" backgroundAlpha="1" backgroundColor="#aecfea" borderColor="#000000" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:Label text="|" fontWeight="bold" fontSize="18" textAlign="center"  width="10" height="25" verticalAlign="middle"/>
                <s:BorderContainer id="color1" click="colorClick(0xaecfea)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#aecfea" borderColor="#000000" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color2" click="colorClick(0x5484ed)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#5484ed" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color3" click="colorClick(0xa4bdfc)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#a4bdfc" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color4" click="colorClick(0x46d6db)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#46d6db" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color5" click="colorClick(0x7ae7bf)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#7ae7bf" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color6" click="colorClick(0x51b749)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#51b749" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color7" click="colorClick(0xfbd75b)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#fbd75b" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color8" click="colorClick(0xffb878)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#ffb878" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color9" click="colorClick(0xff887c)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#ff887c" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <s:BorderContainer id="color10" click="colorClick(0xdbadff)" useHandCursor="true" buttonMode="true"  mouseEnabled="true" backgroundAlpha="1" backgroundColor="#dbadff" borderColor="#ffffff" borderWeight="2" width="20" height="20">
                </s:BorderContainer>
                <mx:ColorPicker id="colorPicker" color="#010000" selectedColor="#ffffff" change="colorChange();need_saved();"
                                symbolColor="#030002">

                </mx:ColorPicker>
            </s:FormItem>

            <s:FormItem label="责任人：" height="60" backgroundColor="0xf1f1f1" >
                <s:layout>
                    <s:HorizontalLayout gap="10" verticalAlign="top">
                    </s:HorizontalLayout>
                </s:layout>
                <s:Scroller width="100%"  height="100%" >
                    <s:TileGroup id="usersGroup" width="100%" toolTip="责任人：参与完成任务的员工" columnAlign="justifyUsingGap" >
                    </s:TileGroup>
                </s:Scroller>
                <uicontrol:Btn width="16" height="16" styleName="btnAdd" clickFun="{openUserChoice}" />
            </s:FormItem>
            <s:FormItem id="authorpanel" label="审核人：" height="25"  toolTip="审核人：任务完成后，审核人进行确认。" >
                <s:layout>
                    <s:HorizontalLayout gap="10">
                    </s:HorizontalLayout>
                </s:layout>
                <s:DropDownList id="checkerDownList" enabled="{!need_check.selected}" labelField="name" dataProvider="{departmentMembers}" change="need_saved();"></s:DropDownList>
                <s:CheckBox label="无需审核" selected="true" id="need_check" change="need_saved();">
                </s:CheckBox>
            </s:FormItem>
            <s:FormItem id="tixingItem" visible="{is_all_day.selected}" label="提醒：" height="25" includeInLayout="{tixingItem.visible}">
                <s:CheckBox id="boxTiXing" change="changeTiXing();need_saved();" selected="false" label="无需提醒" />
            </s:FormItem>
            <s:FormItem id="itemTixing" label="提醒：" height="75">
                <s:TileGroup id="tixingTile" includeInLayout="{tixingTile.visible}" width="100%" height="75"  columnAlign="justifyUsingGap" >
                <s:CheckBox id="alertBox0" label="到点提醒" selected="true" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox1" label="提前5分钟" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox2" label="提前10分钟" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox3" label="提前15分钟" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox4" label="提前30分钟" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox5" label="提前45分钟" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox6" label="提前1小时" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox7" label="提前2小时" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox8" label="提前4小时" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox9" label="提前1天" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox10" label="提前2天" change="need_saved();" ></s:CheckBox>
                <s:CheckBox id="alertBox11" label="提前1周" change="need_saved();" ></s:CheckBox>
                </s:TileGroup>
            </s:FormItem>
            <s:FormItem label="优先级：" height="35" >
                <s:layout>
                    <s:HorizontalLayout gap="10" verticalAlign="middle">
                    </s:HorizontalLayout>
                </s:layout>
                <s:DropDownList id="urgentDownList" selectedIndex="0"  labelField="label" dataProvider="{ToolUtil.taskurgentlist}" toolTip="任务的完成优先级" change="need_saved();" ></s:DropDownList>
                <s:Label text="权重："/>
                <s:NumericStepper id="levleStepper" minimum="0" value="1" maximum="100" width="100" toolTip="权重：完成所需要的工时，或者本任务的重要性"  change="need_saved();" />
            </s:FormItem>
            <mx:ControlBar  id="dopanel" width="100%" height="40">
                <s:Button id="btnSave" chromeColor="red" label="保存" height="25" color="#ffffff" click="save()" />
                <s:Button id="btnDel" chromeColor="#cccccc" label="删除" height="25" color="#000000" click="delAsk()" />
                <s:Button id="btnReset"  includeInLayout="{btnReset.visible}" visible="{schedulData!=null? btnSave.visible:false}" chromeColor="#cccccc" label="恢复" height="25" color="#000000" click="init()" />
                <s:Spacer width="100%"></s:Spacer>
                <s:Button id="btnStart" includeInLayout="{btnStart.visible}" chromeColor="red" label="开始" height="25" color="#ffffff" click="changeSchedule(2)" />
                <s:Button id="btnFinish" includeInLayout="{btnFinish.visible}"  chromeColor="red" label="完成" height="25" color="#ffffff" click="changeSchedule(3)" />
                <s:Button id="btnCheck" includeInLayout="{btnCheck.visible}"  chromeColor="red" label="审核通过" height="25" color="#ffffff" click="changeSchedule(4)" />
                <s:Button id="btnRestart" includeInLayout="{btnRestart.visible}" chromeColor="#cccccc" label="重新开启" height="25" color="#000000" click="changeSchedule(1)" />
                <s:Spacer width="30"></s:Spacer>
            </mx:ControlBar>
        </s:Form>

        <control:ChatControl id="chatControl" width="600" height="{schedulePanel.height}"  bigPanel="false"  visible="false" includeInLayout="{chatControl.visible}">

        </control:ChatControl>
    </s:HGroup>

</window:EfficientTitleWindow>
