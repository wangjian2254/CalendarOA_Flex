<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
                   width="100" height="25" borderColor="#ff0000" cornerRadius="7" borderVisible="true" borderWeight="4"
                   backgroundAlpha="1" creationComplete="init()" mouseOver="btn_mouseOverHandler(event)"
                   mouseOut="btn_mouseOutHandler(event)" >
    <s:layout>
		<s:VerticalLayout gap="2" paddingLeft="10" verticalAlign="top" paddingTop="1" horizontalAlign="left"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
        import flash.filters.BitmapFilterQuality;
        import flash.filters.BitmapFilterType;

        import model.Schedule;

        import spark.effects.animation.RepeatBehavior;

        import util.ScheduleUtil;

        [Bindable]
        public var color:Number = 0xffffff;
        [Bindable]
        public var scheduleName:String = "开会";

        [Bindable]
        public var scheduleId:String = "21";

        public var scheduleData:Schedule = null;

        public var descShow:Boolean = false;


        public var fun:Function = null;

        private function init():void {
            if (!descShow) {
                lbldesc.maxDisplayedLines = 0;
            } else {
                lbldesc.maxDisplayedLines = -1;
            }
            if (scheduleData != null) {
                lbldesc.toolTip = scheduleData.getDesc();
            }
            var c:Array=generateTransitionalColor(color,0xffffff,3);
            entry1.color = color;
            entry2.color = c[1];

        }

        private function openSchedule(e:MouseEvent):void {
            if (!(e.target is Label)) {
                return;
            }
            if (fun != null) {
                fun();
            } else {
                ScheduleUtil.showSchedulePanel(scheduleId);
            }
        }
        private var animating:Boolean = false;

        protected function btn_mouseOverHandler(event:MouseEvent):void
        {
            if (!animating)
            {
                glower.play();
                animating = true;
            }
        }

        protected function btn_mouseOutHandler(event:MouseEvent):void
        {
            if (animating)
            {
                glower.end();
                animating = false;
            }
        }

        /**
         * 输入一个颜色,将它拆成三个部分:
         * 红色,绿色和蓝色
         */
        public static function retrieveRGBComponent( color:uint ):Array
        {
            var r:Number = color >> 16;
            var g:Number = (color >> 8) & 0xff;
            var b:Number = color & 0xff;

            return [r, g, b];
        }
        /**
         * 红色,绿色和蓝色三色组合
         */
        public static function generateFromRGBComponent( rgb:Array ):int
        {
            if( rgb == null || rgb.length != 3 ||
                    rgb[0] < 0 || rgb[0] > 255 ||
                    rgb[1] < 0 || rgb[1] > 255 ||
                    rgb[2] < 0 || rgb[2] > 255 )
                return 0xFFFFFF;
            return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
        }

        /**
         * color1是浅色,color2是深色,实现渐变
         * steps是指在多大的区域中渐变,
         */
        public static function generateTransitionalColor( color1:uint, color2:uint, steps:int):Array
        {
            if( steps < 3 )
                return [];

            var color1RGB:Array = retrieveRGBComponent( color1 );
            var color2RGB:Array = retrieveRGBComponent( color2 );

            var colors:Array = [];
            colors.push( color1 );
            //steps = steps - 2;

            var redDiff:Number = color2RGB[0] - color1RGB[0];
            var greenDiff:Number = color2RGB[1] - color1RGB[1];
            var blueDiff:Number = color2RGB[2] - color1RGB[2];
            for( var i:int = 1; i < steps - 1; i++)
            {
                var tmpRGB:Array = [
                    color1RGB[0] + redDiff * i / steps,
                    color1RGB[1] + greenDiff * i / steps,
                    color1RGB[2] + blueDiff * i / steps
                ];
                colors.push( generateFromRGBComponent( tmpRGB ) );
            }
            colors.push( color2 );

            return colors;
        }

        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <s:GradientGlowFilter id="glow"
                              blurX="25" blurY="25"
                              quality="{BitmapFilterQuality.HIGH}"
                              type="{BitmapFilterType.OUTER}"
                              knockout="false">
            <s:entries>
                <s:GradientEntry alpha="0" id="entry1" color="0xFF0000" ratio="0"/>
                <s:GradientEntry alpha="1"  id="entry2" color="0xFFFF00" ratio="128"/>
                <s:GradientEntry alpha="1" color="0xFFFFFF" ratio="255"/>
            </s:entries>
        </s:GradientGlowFilter>
        <s:AnimateFilter id="glower" target="{this}" bitmapFilter="{glow}"
                         duration="600" repeatCount="0" repeatBehavior="{RepeatBehavior.REVERSE}">
            <s:SimpleMotionPath property="strength" valueFrom="0" valueTo="5" />
        </s:AnimateFilter>
	</fx:Declarations>
		<s:Label id="lbldesc" width="100%" height="100%" text="{scheduleName}"   buttonMode="true" click="openSchedule(event)"  />
</s:BorderContainer>
