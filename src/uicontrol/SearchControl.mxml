<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         width="400" height="300" creationComplete="init()">
    <s:layout>
        <s:BasicLayout/>
    </s:layout>
    <fx:Script>
		<![CDATA[
        import httpcontrol.CHTTPService;

        import json.JParser;

        import mx.collections.ArrayCollection;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
        import mx.rpc.http.HTTPService;

        import util.ToolUtil;
        import util.UUIDUtil;

        private var tempArr:ArrayCollection = new ArrayCollection();
        private var searchTimer:Timer = new Timer(1200, 1);

        private function init():void {
            searchTimer.addEventListener(TimerEvent.TIMER, querySchedule);
            l.datalist = tempArr;
            l.addEventListener("changed", getalert);
            l.addEventListener("change", getvaluelabel);
            //l.addEventListener("click",getalert);
//            a.filterFunction = filterA;
        }

        private function getalert(e:Event):void {

            var a1:Object = l.myl.selectedItem;
        }

        //        private var pan:Panel;
        //        private var regexp:RegExp;


        private var queryFlag:String = null;

        private function checkInput0():void {

            //todo: 讨论组 搜索，只能是自己存在的讨论组。自己不存在的部门，可以搜索到，但是无法打开聊天。
            var str:String = input.text;
            if (str == "") {
                PopUpManager.removePopUp(l);
                return;
            }
            queryFlag = UUIDUtil.create();
            tempArr.removeAll();
            tempArr.refresh();
            // 成员 过滤
            var lperson:ArrayCollection = new ArrayCollection();
            for each(var person:Object in ToolUtil.memberList) {
                if (person.name.indexOf(str) > -1) {
                    person.searchtype = 'person'
                    lperson.addItem(person);
                }
            }
            if (lperson.length > 0) {
                person = lperson.getItemAt(0);
                person.typestr = "成员";
                person.flag = true;
                tempArr.addAll(lperson);
            }
            // 项目 过滤
            var lproject:ArrayCollection = new ArrayCollection();
            for each(person in ToolUtil.allProjectList) {
                if (person.name.indexOf(str) > -1) {
                    person.searchtype = "project";
                    lproject.addItem(person);
                }
            }
            if (lproject.length > 0) {
                person = lproject.getItemAt(0);
                person.typestr = "项目";
                person.flag = true;
                tempArr.addAll(lproject)
            }

            var point:Point = this.contentToGlobal(new Point(0, this.height));
            l.x = point.x;

            l.y = point.y;
            l.top = 20;
            l.width = this.width;
            l.addEventListener("change", getvalue);
            PopUpManager.addPopUp(l, this, false);
            searchTimer.reset();
            searchTimer.start();


        }

        private function querySchedule(e:TimerEvent):void {
            var str:String = input.text;
            if (str == "") {
                return;
            }
            var query:HTTPService = new HTTPService();
            query.url = CHTTPService.baseUrl + "/ca/querySchedule";
            query.resultFormat = "text";
            query.method = "POST";
            query.addEventListener(ResultEvent.RESULT, function (event:ResultEvent):void {
                var result:Object = JParser.decode(event.result.toString());
                var item:Object;
                if (result.success == true && result.result.flagid == queryFlag) {
                    var lschedule:ArrayCollection = new ArrayCollection(result.result.schedulelist as Array);
                    for each(item in lschedule) {
                        item.searchtype = "schedule";
                    }
                    if (lschedule.length > 0) {
                        item = lschedule.getItemAt(0);
                        item.typestr = "任务";
                        item.flag = true;
                        tempArr.addAll(lschedule);
                    }
                }
            });
            query.send({"search": str, "flagid": queryFlag});
        }

        private var l:MyList = new MyList();


        private function getvalue(e:Event):void {

            input.text = l.myl.toString();
            PopUpManager.removePopUp(l);
        }

        private function getvaluelabel(e:Event):void {

            var a1:Object = l.myl.selectedItem;
            input.text = a1.label;
            PopUpManager.removePopUp(l);
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->

    </fx:Declarations>
    <s:TextInput id="input" prompt="搜索日程、任务、成员或文件" change="checkInput0()" width="100%" height="100%" borderColor="#d6d6d6"  />
</s:Group>
