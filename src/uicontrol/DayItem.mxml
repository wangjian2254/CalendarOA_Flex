<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx" width="100"  height="110" backgroundAlpha="1" doubleClickEnabled="true"
                   doubleClick="createSchedule(event)" creationComplete="init()">
    <s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
        import events.ChangeScheduleEvent;

        import model.Schedule;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;

        import spark.collections.Sort;

        import spark.collections.SortField;

        import spark.layouts.BasicLayout;
        import spark.skins.spark.BorderContainerSkin;

        import util.DateUtil;
        import util.ScheduleUtil;
        import util.ToolUtil;

        [Bindable]
        public var blank:Boolean = false;
        [Bindable]
        public var date:String = "";
        [Bindable]
        public var nowdate:String = "";

        [Bindable]
        public var is_all_day:Number = 0;

//        private var groupShowData:Object = new Object();

        private var scheduleArr:ArrayCollection = new ArrayCollection();

        public function init():void {
            this.contentGroup.clipAndEnableScrolling = true;
            if (blank) {
                return;
            }
            if (is_all_day == 2) {
                dbor.height = 0;
                dstr.height = 0;
                mstr.height = 0;
                scheduleList.layout = new BasicLayout();

            } else {
                dbor.height = 25;
                dstr.height = 25;
                mstr.height = 25;
                scheduleList.layout = new VerticalLayout()
            }
            if (date == "") {
                showTimeLine(50, true);
                return;
            }

            if (date.substr(0, 6) == nowdate.substr(0, 6)) {
                this.setStyle("backgroundColor", 0xffffff);
                dstr.setStyle("color", 0x000000);
                mstr.setStyle("color", 0x000000);

            } else {

                dstr.setStyle("color", 0xcccccc);
                mstr.setStyle("color", 0xcccccc);
            }
            if (date == monthstr.format(new Date())) {
                this.setStyle("backgroundColor", 0xeaeaea);
            }
            getScheduleByDate();
            FlexGlobals.topLevelApplication.addEventListener(ChangeScheduleEvent.ChangeSchedule_EventStr, getScheduleByDate);
        }

        private function getScheduleByDate(e:Event = null):void {

            scheduleArr.removeAll();
//            groupShowData = new Object();
            if (ToolUtil.scheduleMap.hasOwnProperty("schedulelist") && ToolUtil.scheduleMap.schedulelist.hasOwnProperty(date)) {
                for each(var i:String in ToolUtil.scheduleMap.schedulelist[date]) {

                    scheduleArr.addItem(ToolUtil.scheduleMap.schedulemap[i]);
                }
            }
            var sort:Sort=new Sort();
            //按照ID升序排序
            sort.fields=[new SortField("time_start"),new SortField("time_end"),new SortField("id")];
            scheduleArr.sort=sort;
            scheduleArr.refresh();
            showSchedule();
            if(scheduleArr.length>0){
                scheduleNum.text=scheduleArr.length+" 个任务"
            }else{
                scheduleNum.text="";
            }

        }

        private function createSchedule(e:MouseEvent):void {
            if (!(e.target is BorderContainerSkin)) {
                return;
            }
            if (is_all_day == 2) {


                var d:Date = getTimeByY(e.localY);
                var ed:Date = getTimeByY(e.localY);
                ed.minutes += 30;
                if (d.date != ed.date) {
                    ed.minutes -= 1;
                }
                ScheduleUtil.createSchedule(d, ed);

            } else {

                ScheduleUtil.createSchedule(DateUtil.parseDate(date + timestr.format(new Date())), DateUtil.parseDate(date + timestr.format(new Date())));
            }
        }

        private var schedulePos:Object = null;

        public function showSchedule():void {
            schedulePos = new Object();
            for each(var obj:Schedule in scheduleArr) {
                if (is_all_day == 2 && !obj.is_all_day) {
                    schedulePos[obj.id] = {y:getY(Number(obj.time_start.substr(0, 2)) * 2) + getYbyMin(Number(obj.time_start.substr(2, 2))) + 2}
                    schedulePos[obj.id]['ph']=getY(Number(obj.time_end.substr(0, 2)) * 2) + getYbyMin(Number(obj.time_end.substr(2, 2))) - schedulePos[obj.id].y - 1;
                }
            }
            for each(var obj:Schedule in scheduleArr) {
                if (is_all_day == 2 && !obj.is_all_day) {
                    var w:Number = getScheduleWidth(schedulePos[obj.id].y);
                    schedulePos[obj.id]['w']=w;
                    schedulePos[obj.id]['p']=getScheduleX_P(schedulePos[obj.id].y,w);
                }
            }
            for each(var obj:Schedule in scheduleArr) {
                if (is_all_day == 2 && !obj.is_all_day) {
                    var x:Number = getScheduleX(schedulePos[obj.id].y);
                    schedulePos[obj.id]['px']=x;
                }
            }
            for each(var obj:Schedule in scheduleArr) {
                if (is_all_day == 2 && !obj.is_all_day) {
                    var h:Number = getScheduleH(schedulePos[obj.id].px,schedulePos[obj.id].y,schedulePos[obj.id].ph);
                    schedulePos[obj.id]['h']=h;
                }
            }
            for each(var obj:Schedule in scheduleArr) {
                if (is_all_day == 2 && !obj.is_all_day) {
                    var x:Number = getScheduleW_P(schedulePos[obj.id].px,schedulePos[obj.id].y,schedulePos[obj.id].w,schedulePos[obj.id].ph);
                    schedulePos[obj.id]['w']-=x-schedulePos[obj.id]['px'];
                    schedulePos[obj.id]['x']=x;
                }
            }
            scheduleList.removeAllElements();
            var scheduleItem:ScheduleItem = null;
            for each(var obj:Schedule in scheduleArr) {
                scheduleItem = new ScheduleItem();
                scheduleItem.scheduleData = obj;
                scheduleItem.scheduleName = obj.title;
                scheduleItem.color = obj.color;
                scheduleItem.scheduleId = obj.id;
                scheduleItem.width = this.width - 5;

                switch (obj.status) {
                    case 1:
                        if (!obj.isOutOfDate()) {
                            scheduleItem.setStyle("borderWeight", 1);
                            scheduleItem.setStyle("borderColor", 0x000000);
                        }
                        break;
                    case 2:
                        scheduleItem.setStyle("borderColor", 0x02711D);
                        break;
                    case 3:
                        scheduleItem.setStyle("borderColor", 0xdf9110);
                        break;
                    case 4:
                        scheduleItem.setStyle("borderWeight", 1);
                        scheduleItem.setStyle("cornerRadius", 0);
                        scheduleItem.setStyle("borderColor", 0x000000);

                        break;
                }
                if (obj.isOutOfDate()) {
                    scheduleItem.setStyle("borderColor", 0xff0000);
                }

                scheduleItem.setStyle("backgroundColor", obj.color);

//                if (!groupShowData.hasOwnProperty("" + obj.department) || groupShowData["" + obj.department]) {

                    if (is_all_day == 2 && !obj.is_all_day) {
//                        var x:Number = 2;
//                        var y:Number = 0;
//                        y = getY(Number(obj.time_start.substr(0, 2)) * 2) + getYbyMin(Number(obj.time_start.substr(2, 2))) + 2;
//                        while (schedulePos.hasOwnProperty(y.toString())) {
//                            y += 20;
//                            if (this.width < 300) {
//                                x += 25;
//                            } else {
//                                x += 40;
//                            }
//                        }
//                        if (this.width < 300) {
//                            x += 25 * yisused(y);
//                        } else {
//                            x += 40 * yisused(y);
//                        }
//                        schedulePos[y.toString()] = true;
                        scheduleItem.x = schedulePos[obj.id].x;
                        scheduleItem.y = schedulePos[obj.id].y;
                        scheduleItem.width = schedulePos[obj.id].w;
                        scheduleItem.height = schedulePos[obj.id].h;


                        scheduleItem.descShow = true;

                        scheduleList.addElement(scheduleItem);

                    }
                    if (is_all_day == 3 && obj.is_all_day) {
                        scheduleList.addElement(scheduleItem);
                    }
                    if (is_all_day == 1) {
                        scheduleList.addElement(scheduleItem);
                    }
                }
//            }
        }

        private function getScheduleX(y:Number):Number{
            var x:Number=2;
            for(var id:String in schedulePos){
                if(schedulePos[id].y==y){
                    if(schedulePos[id].px&&schedulePos[id].px>=x){
                        x=schedulePos[id].px+schedulePos[id].p;
                    }
                }
            }
            return x;
        }

        private function getScheduleH(x:Number,y:Number,h:Number):Number{
            for(var id:String in schedulePos){
                var b:Boolean = getScheduleH_repeat(x,y,h);
                if(b){
                    h-=5;
                }else{
                    break;
                }
            }
            return h;
        }
        private function getScheduleH_repeat(x:Number,y:Number,h:Number):Boolean{
            for(var id:String in schedulePos){
                if(schedulePos[id].h&&(schedulePos[id].y+schedulePos[id].h)==(y+h)&&schedulePos[id].px==x){
                    return true;
                }
            }
            return false;
        }

        private function getScheduleW_P_R(x:Number,y:Number,w:Number,h:Number):Boolean{
            for(var id:String in schedulePos){
                if(schedulePos[id].x&&schedulePos[id].y<=y&&(schedulePos[id].y+schedulePos[id].h)>=y&&schedulePos[id].x==x&&schedulePos[id].w<=w){
                    return true;
                }
            }
            return false;
        }

        private function getScheduleW_P(x:Number,y:Number,w:Number,h:Number):Number{
            for(var id:String in schedulePos){
                var b:Boolean = getScheduleW_P_R(x,y,w,h);
                if(b){
                    x+=10;
                }else{
                    break;
                }
            }
            return x;
        }

        private function getScheduleWidth(y:Number):Number{
            var n:Number=0;
            for(var id:String in schedulePos){
                if(schedulePos[id].y==y){
                    n+=1;
                }
            }
            var w:Number=(this.width-4)/n;
            if(w<110){
                w=110;
            }
            if(w>this.width-2){
                w = this.width-50;
            }
            return w;
        }

        private function getScheduleX_P(y:Number, w:Number):Number{
            var n:Number=0;
            for(var id:String in schedulePos){
                if(schedulePos[id].y==y){
                    n+=1;
                }
            }
            if(n==1){
                return 2;
            }
            var p:Number=(this.width-w)/(n-1);
            return p;
        }

        private function yisused(y:Number):Number {
            var n:Number = 0;
            for (var i:Number = 0; i < 60; i++) {
                if (schedulePos.hasOwnProperty((y - i).toString())) {
                    n++;
                }
            }
            return n;
        }

        public function showTimeLine(w:Number, flag:Boolean):void {
            this.contentGroup.graphics.clear();
            if (this.height > 200 && flag) {
                for (var i:Number = 0; i < 48; i++) {
                    drawline(w, i);
                }

            }
            var d:Date = new Date();
            this.contentGroup.graphics.lineStyle(2, 0xFF0000);
            this.contentGroup.graphics.moveTo(0, getY(d.hours * 2) + getYbyMin(d.minutes));
            this.contentGroup.graphics.lineTo(w, getY(d.hours * 2) + getYbyMin(d.minutes));
            if(date==""){
                showTime();
            }
        }

        private function drawline(w:Number, i:Number):void {

            this.contentGroup.graphics.lineStyle(1, 0x000000);
            if (i % 2 == 1) {
                this.contentGroup.graphics.moveTo(0, getY(i + 1));
                this.contentGroup.graphics.lineTo(w, getY(i + 1));
            } else {
                for (var s:Number = 0; s < w / 5; s++) {
                    if (s % 2 == 0) {
                        this.contentGroup.graphics.moveTo(s * 5, getY(i + 1));
                        this.contentGroup.graphics.lineTo(s * 5 + 5, getY(i + 1));
                    }
                }
            }

        }

        private function showTime():void {
            scheduleList.removeAllElements();
            var d:Date = null;

            var lbl:Label = null;
            d = DateUtil.parseDate("201401010000");
            lbl = new Label();
            lbl.text = timestr2.format(d);
            lbl.x = 10;
            lbl.y = getY(1);
            scheduleList.addElement(lbl);
            for (var i:Number = 13; i < 40; i++) {
                d = DateUtil.parseDate("201401010000");
                d.minutes += (i + 1) * 30;
                lbl = new Label();
                lbl.text = timestr2.format(d);
                lbl.x = 10;
                lbl.y = getY(i + 1);
                scheduleList.addElement(lbl);
            }
            d = DateUtil.parseDate("201401010000");
            d.minutes += (47 + 1) * 30 - 1;
            lbl = new Label();
            lbl.text = timestr2.format(d);
            lbl.x = 10;
            lbl.y = getY(47) - 15;
            scheduleList.addElement(lbl);
        }

        private function getTimeByY(y:int):Date {
            if (y <= getY(14)) {
                d = DateUtil.parseDate(date);
                d.minutes += 30 * 12;
                return d;
            }
            var d:Date = null;
            for (var i:int = 14; i < 41; i++) {
                if (y > getY(i) && y < getY(i + 1)) {
                    d = DateUtil.parseDate(date);
                    d.minutes += i * 30;
                    return d;
                }
            }
            return DateUtil.parseDate(date + 7);
        }

        private function getY(index:int):Number {
            var yitem:int = this.height / 30;
            if (index < 14) {
                return -1;
            }
            if (index == 14) {
                return yitem * 2;
            }
            if (index > 14 && index <= 39) {
                return yitem * 2 + (index - 14) * yitem;
            }
            if (index == 40) {
                return yitem * 28;
            }
            if (index > 40) {
                return this.height;
            }
            return yitem * index;
        }

        private function getYbyMin(m:int):Number {
            var yitem:int = this.height / 30;

            return yitem / 60 * m * 2;
        }
        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:DateFormatter id="monthstr" formatString="YYYYMMDD" >
			
		</mx:DateFormatter>
		<mx:DateFormatter id="timestr" formatString="JJNN" >
			
		</mx:DateFormatter>
		<mx:DateFormatter id="timestr2" formatString="JJ:NN" >
			
		</mx:DateFormatter>
	</fx:Declarations>
	
		<s:Group id="dbor" width="100%" height="20"   >
			<s:layout>
				<s:HorizontalLayout paddingLeft="10">
					
				</s:HorizontalLayout>
			</s:layout>
			<s:Label id="dstr" visible="{is_all_day!=2?true:false}" fontWeight="bold" fontSize="15" text="{date.substr(6,2)}" textAlign="center" height="100%" verticalAlign="middle">
				
			</s:Label>
			<s:Label id="mstr" fontSize="13"   text="{date.substr(4,2)+'月'}" visible="{date.substr(6,2)=='01'?is_all_day!=2?true:false:false}" textAlign="center" height="100%" verticalAlign="middle">
				
			</s:Label>
            <s:Label id="scheduleNum" visible="{is_all_day!=2?true:false}"   textAlign="center" height="100%" verticalAlign="middle">

            </s:Label>
		</s:Group>
        <s:Group id="scheduleList" width="100%" height="100%" >
            <s:layout>
                <s:VerticalLayout paddingLeft="3" gap="0">
                </s:VerticalLayout>
            </s:layout>
        </s:Group>
	
	
		
</s:BorderContainer>
