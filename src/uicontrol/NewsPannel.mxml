<?xml version="1.0"?>
<!--
  Created by WangJian on 2014/11/6.
-->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:uicontrol="uicontrol.*"
                   cornerRadius="12"
                   borderColor="#000000" borderStyle="solid" width="250" height="60" styleName="paopaonotify"
                   creationComplete="init()">
    <!--<s:backgroundFill>-->
    <!--<s:SolidColor  id="back10" color="#b0e861" alpha="1"/>-->
<!--</s:backgroundFill>-->

    <fx:Script><![CDATA[
        import flash.filters.BevelFilter;
        import flash.filters.DropShadowFilter;
        import flash.filters.GlowFilter;

        import httpcontrol.HttpServiceUtil;

        import model.ChatChannel;
        import model.Schedule;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.events.MenuEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import org.idream.pomelo.Pomelo;

        import util.NotifyTools;
        import util.ScheduleUtil;
        import util.ToolUtil;

//        [Bindable]
//        private var dropBevelFilter:BevelFilter = new BevelFilter(10, 270, 0, 0, 0xffffff, .5, 8, 8, 8, 8);
//
//        [Bindable]
//        private var dropShadow:DropShadowFilter = new DropShadowFilter(2, 90, 0x000000, 0.35, 4, 4);
//
//        [Bindable]
//        private var Inner:GlowFilter = new GlowFilter(0xffffff, .5, 8, 8, 2, 4, true);

        public var unReadMessage:ArrayCollection = null;

        public var message:Object;

        public function init():void {
            if(message==null){
                return;
            }
            if (message is Schedule) {
                contentLabel.text = message.title;
                nameLabel.text = "任务提醒";
            } else {
                if (message != null && message.hasOwnProperty("te")) {
                    contentLabel.text = message.te;
                    if (message.channel.substr(0, 1) == "g" || message.channel.substr(0, 1) == "t") {
                        var f:Boolean = false;
                        for each(var g:ChatChannel in ToolUtil.groupList) {
                            if (g.channel == message.channel) {
                                f = true;
                                nameLabel.text = g.name;
                                ExternalInterface.call("notify", "/static/smalloaicon/group.png", g.name, message.te);
                            }
                        }
                        if (!f) {
                            Pomelo.getIns().request("connector.entryHandler.queryChannelInfo", {channel: message.channel}, function (data:Object):void {
                                if (data.code == 200 && data.channel != null) {
                                    ToolUtil.groupList.addItem(new ChatChannel(data.channel));
                                    nameLabel.text = data.channel.name;
                                    ExternalInterface.call("notify", "/static/smalloaicon/group.png", data.channel.name, message.te);

                                }
                            });
                        }
                        head.source = "/static/smalloaicon/group.png";
                    } else {
                        if (message.channel.substr(0, 1) == "d") {
                            var did:String = message.channel.substr(1, message.channel.length - 1);
                            for each(var depat:Object in ToolUtil.departMentList) {
                                if (did == depat.id) {
                                    head.source = depat.icon;
                                    nameLabel.text = depat.name;
                                    ExternalInterface.call("notify", depat.icon, depat.name, message.te);
                                }
                            }
                        } else {
                            var pids:Array = message.channel.split("p");
                            for each(var pid:String in pids) {
                                if (pid != ToolUtil.sessionUser.pid) {
                                    var person:Object = ToolUtil.getAnyPersonById(pid);
                                    head.source = person.icon;
                                    nameLabel.text = person.name;
                                    ExternalInterface.call("notify", person.icon, person.name, message.te);
                                }
                            }
                        }
                    }
                }
                if (message.hasOwnProperty("is_notify") && message.is_notify) {
                    ExternalInterface.call("notify", "/static/image/notify.png", "动态", message.msg);
                    head.source = "/static/image/notify.png";
                    openButton.label = "已读";
                    nameLabel.text = "动态";
                    contentLabel.text = message.msg;

                    if (message.type == "join_apply") {
                        openButton.label = "处理";
                    }
                }
            }

        }

        private function m_over():void {
            openButton.visible = true;
            closeButton.visible = true;
        }

        private function m_out():void {
            openButton.visible = false;
            closeButton.visible = false;
        }

        private function closeW():void {
            PopUpManager.removePopUp(this);
            if (unReadMessage.getItemIndex(this) > -1) {
                unReadMessage.removeItemAt(unReadMessage.getItemIndex(this));
            }

        }

        private function openW():void {
            if (message is Schedule) {
                ScheduleUtil.showSchedulePanel(message.id);
            } else {
                if (message != null && message.hasOwnProperty("te")) {
                    var event:MenuEvent = new MenuEvent(MenuEvent.CHANGE);
                    event.item = {mod: 'message', label: '消息', obj: message.channel};

                    FlexGlobals.topLevelApplication.dispatchEvent(event);
                }
                if (message.hasOwnProperty("is_notify") && message.is_notify) {
                    var obj:Object = {'id': message._id};
                    HttpServiceUtil.getCHTTPServiceAndResult("/ca/change_notify_status", function (result:Object, e:ResultEvent):void {
                        message.status = true;
                        NotifyTools.notifylist.refresh();
                    }, "POST").send(obj);

                    if (message.type == "join_apply") {
                        var event1:MenuEvent = new MenuEvent(MenuEvent.CHANGE);
//                        var xml1:XML = new XML("<menuitem label='审批加入申请' mod='checkApply'></menuitem>");
//                        event1.item = xml1;
//
//                        MenuEvent.prototype.obj=null;
                        event1.item = {mod: 'checkApply', label: '审批加入申请', obj: new Object()};
                        FlexGlobals.topLevelApplication.dispatchEvent(event1);
                    }
                }
            }

            closeW();


        }
        ]]></fx:Script>
    <uicontrol:HeadImage id="head" width="45" height="45" top="4" left="4" />
    <s:VGroup top="2" bottom="2" right="75" left="55">
        <s:Label id="nameLabel" fontWeight="bold"  ></s:Label>
        <s:Label id="contentLabel" maxDisplayedLines="-1" width="100%" height="100%" ></s:Label>
    </s:VGroup>

    <s:Button id="openButton" label="回复" right="5" top="2" click="openW()"  ></s:Button>
    <s:Button id="closeButton" label="关闭" right="5" bottom="2" click="closeW()" ></s:Button>
</s:BorderContainer>